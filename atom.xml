<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LoveITer</title>
  
  <subtitle>欢迎访问我的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://easyblog.top/"/>
  <updated>2019-08-07T12:22:56.881Z</updated>
  <id>http://easyblog.top/</id>
  
  <author>
    <name>黄鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC视图解析</title>
    <link href="http://easyblog.top/2019/08/07/SpringMVC%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90/"/>
    <id>http://easyblog.top/2019/08/07/SpringMVC视图解析/</id>
    <published>2019-08-07T06:41:44.000Z</published>
    <updated>2019-08-07T12:22:56.881Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringMVC视图解析"><a href="#SpringMVC视图解析" class="headerlink" title="SpringMVC视图解析"></a>SpringMVC视图解析</h3><p> &nbsp; &nbsp; &nbsp;对于控制器的目标方法，无论其返回值是String、View、ModelMap或是ModelAndView，SpringMVC都会在内部将它们封装为一个ModelAndView对象进行返回。<br>     &nbsp; &nbsp; &nbsp; Spring MVC 借助视图解析器（ViewResolver）得到最终的视图对象（View），最终的视图可以是JSP也可是Excell、 JFreeChart等各种表现形式的视图。</p><h4 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h4><blockquote><p> 视图的作用是渲染模型数据，将模型里的数据以某种形式呈现给客户。 为了实现视图模型和具体实现技术的解耦，Spring在org.springframework.web.servlet包中定义了一个高度抽象的View接口。<br>   视图对象由视图解析器负责实例化。由于视图是无状态的，所以他们不会有线程安全的问题。所谓视图是无状态的，是指对于每一个请求，都会创建一个View对象。<br>　JSP是最常见的视图技术。 </p></blockquote><center><a href="https://sm.ms/image/h1GdgDwFS4OeMLy" target="_blank"><img src="https://i.loli.net/2019/08/07/h1GdgDwFS4OeMLy.png"></a></center><h4 id="视图解析器（ViewResolver）和视图（View）"><a href="#视图解析器（ViewResolver）和视图（View）" class="headerlink" title="视图解析器（ViewResolver）和视图（View）"></a>视图解析器（ViewResolver）和视图（View）</h4><ul><li><strong>springMVC用于处理视图最重要的两个接口是<code>ViewResolver</code>和<code>View</code>。</strong><center><a href="https://sm.ms/image/ocemL4slE7KxngD" target="_blank"><img src="https://i.loli.net/2019/08/07/ocemL4slE7KxngD.png"></a></center></li></ul><p><font color="red"><strong>所以视图解析器的作用就是通过视图名（处理方法的返回值）生成View对象</strong></font>，所有的视图解析器都必须实现ViewResolver接口。<br>　　 SpringMVC为逻辑视图名的解析提供了不同的策略，可以在Spring WEB上下文中配置一种或多种解析策略，并指定他们之间的先后顺序。每一种映射策略对应一个具体的视图解析器实现类。程序员可以选择一种视图解析器或混用多种视图解析器。可以通过order属性指定解析器的优先顺序，order越小优先级越高，SpringMVC会按视图解析器顺序的优先顺序对逻辑视图名进行解析，直到解析成功并返回视图对象，否则抛出ServletException异常。<br>在项目中可以配置<code>InternalResourceViewResolver</code>作为视图解析器,在springmvc.xml中可以做如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span>  <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="forward-和redirect"><a href="#forward-和redirect" class="headerlink" title="forward: 和redirect:"></a>forward: 和redirect:</h4><p>一般情况下，控制器方法返回字符串类型的值会被当成逻辑视图名处理，会经过视图解析器拼串，但如果返回的字符串中带forward:或redirect:前缀时，SpringMVC会对它们进行特殊处理：将forward: 和redirect: 当成指示符，其后的字符串作为URL 来处理。示例如下：<br><code>index.html</code></p><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC给页面输出数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler1"</span>&gt;</span>handler1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler2"</span>&gt;</span>handler2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler3"</span>&gt;</span>handler3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler4"</span>&gt;</span>handler4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>hello.jsp</code>，在当前项目的根路径下，和index.html同级</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;h1&gt;这是hello.jsp&lt;/h1&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>ViewTestController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.Contorller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler1把请求转发到hello.jsp页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"handler1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/hello.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler把请求转发给handler1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handler2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:handler1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重定向到hello.jsp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">handler3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"handler3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/hello.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重定向到handler3</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler4"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handler4"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:handler3"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果:</p><p><a href="https://sm.ms/image/WS3iPsRax8ogvHu" target="_blank"><img src="https://i.loli.net/2019/08/07/WS3iPsRax8ogvHu.png" alt="QQ截图20190807154131.png"></a></p><p><a href="https://sm.ms/image/IDgLj7QWA5c1NwM" target="_blank"><img src="https://i.loli.net/2019/08/07/IDgLj7QWA5c1NwM.png" alt="QQ截图20190807154027.png"></a></p><p>按F12打开开发者工具，可以看到确实两次重定向<br><a href="https://sm.ms/image/TxW72zqBuSrUlt3" target="_blank"><img src="https://i.loli.net/2019/08/07/TxW72zqBuSrUlt3.png"></a></p><h4 id="SpringMVC视图的解析流程-结合源码分析"><a href="#SpringMVC视图的解析流程-结合源码分析" class="headerlink" title="SpringMVC视图的解析流程(结合源码分析)"></a>SpringMVC视图的解析流程(结合源码分析)</h4><ul><li>源码中把任何返回返回值封装为ModelAndView的实现：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.checkRequest(request);</span><br><span class="line">     ModelAndView mav;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">         HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">         <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">             Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">             <span class="keyword">synchronized</span>(mutex) &#123;</span><br><span class="line">               mav = <span class="keyword">this</span>.invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             mav = <span class="keyword">this</span>.invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         mav = <span class="keyword">this</span>.invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(!response.containsHeader(<span class="string">"Cache-Control"</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;        <span class="keyword">this</span>.applyCacheSeconds(response,<span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.prepareResponse(response);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> mav;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>这里以发出了一个GET请求为例：<br>首先<code>FrameworkServlet类</code>会来处理这个GET请求<br><code>doGet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processRequest(request, response);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>processRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//省略.....</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//它本类中的这个方法是个抽象方法，实现这个方法的类是DispatcherServlet</span></span><br><span class="line">            <span class="keyword">this</span>.doService(request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ServletException var16) &#123;</span><br><span class="line">            failureCause = var16;</span><br><span class="line">            <span class="keyword">throw</span> var16;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">           <span class="comment">//省略.....var17);</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//省略.....</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>DispatcherServlet 类</code><br><code>doService方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//省略.....</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//给request域中设置了一些东西</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用doDispatch方法处理</span></span><br><span class="line">        <span class="keyword">this</span>.doDispatch(request, response);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       ......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>doDispatch方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//省略......</span></span><br><span class="line">       <span class="keyword">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">        <span class="comment">//省略......</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>processDispatchResult方法</code>,这个方法就是最终将数据交给页面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response, @Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv, @Nullable Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//如果这里出现了异常就处理异常</span></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</span><br><span class="line"> mv = ((ModelAndViewDefiningException)exception).getModelAndView();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   Object handler = mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>;</span><br><span class="line">   <span class="comment">//如果自己配置了自定义的HandlerExceptionResolver将会在这个方法里处理</span></span><br><span class="line">   mv = <span class="keyword">this</span>.processHandlerException(request, response, handler, exception);</span><br><span class="line">             errorView = mv != <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">              <span class="comment">//调用render方法进行视图渲染</span></span><br><span class="line">             <span class="keyword">this</span>.render(mv, request, response);</span><br><span class="line">            <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">                WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.trace(<span class="string">"No view rendering, null ModelAndView returned."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//省略......</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>DispatcherServlet 类 的<code>render方法</code>并没有继承View接口的render,和View接口的render不是一回事，这个render仅仅是为了命名统一而起的一个名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//省略......</span></span><br><span class="line">   <span class="comment">//从ModelView中拿到视图名</span></span><br><span class="line">    String viewName = mv.getViewName();</span><br><span class="line">     View view;</span><br><span class="line">     <span class="keyword">if</span> (viewName != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//这一步就是得到一个View对象，resolveViewName的实现看下边</span></span><br><span class="line">          view = <span class="keyword">this</span>.resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class="line">  <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + mv.getViewName() + <span class="string">"' in servlet with name '"</span> + <span class="keyword">this</span>.getServletName() + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     view = mv.getView();</span><br><span class="line">     <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a View object in servlet with name '"</span> + <span class="keyword">this</span>.getServletName() + <span class="string">"'"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//省略......</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//省略......</span></span><br><span class="line">        <span class="comment">//调用了View接口的render方法，这里实际上调用的是视图在渲染时会把Model传入</span></span><br><span class="line">       view.render(mv.getModelInternal(), request, response);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">      <span class="comment">//省略......</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resolveViewName方法，循环遍历你配置的视图解析器，viewResolvers是进过order排序的，这一步就是ViewResolvers是如何通过视图名产生View对象的关键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">resolveViewName</span><span class="params">(String viewName,Map&lt;String, Object&gt; model, Locale locale, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//遍历我们配置的视图解析器</span></span><br><span class="line">    <span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</span><br><span class="line">       <span class="comment">//ViewResolver根据方法的返回值，得到一个View对象，这块又有一个resolveViewName，具体的实现请往下看</span></span><br><span class="line">       View view = viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">       <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> view;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InternalResourceViewResolver</code>继承了<code>AbstractCachingViewResolver</code>，resolveViewName方法首先会判断有没有缓存，要是有缓存，它会先去缓存中通过viewName查找是否有View对象的存在，要是没有，它会通过viewName创建一个新的View对象，并将View对象存入缓存中，这样再次遇到同样的视图名的时候就可以直接在缓存中取出View对象了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="comment">//判断有缓存中有没有view对象，有就直接拿来用</span></span><br><span class="line">     <span class="keyword">if</span> (!isCache()) &#123;</span><br><span class="line">         <span class="keyword">return</span> createView(viewName, locale);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(viewName, locale);</span><br><span class="line">        View view = <span class="keyword">this</span>.viewAccessCache.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span> (<span class="keyword">this</span>.viewCreationCache) &#123;</span><br><span class="line">              view = <span class="keyword">this</span>.viewCreationCache.get(cacheKey);</span><br><span class="line">              <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">//根据方法的返回值创建出View对象</span></span><br><span class="line">               view = createView(viewName, locale);</span><br><span class="line">               <span class="keyword">if</span> (view == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.cacheUnresolved) &#123;</span><br><span class="line">                    view = UNRESOLVED_VIEW;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.viewAccessCache.put(cacheKey, view);</span><br><span class="line">                    <span class="keyword">this</span>.viewCreationCache.put(cacheKey, view);</span><br><span class="line">                    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                    logger.trace(<span class="string">"Cached view ["</span> + cacheKey + <span class="string">"]"</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> (view != UNRESOLVED_VIEW ? view : <span class="keyword">null</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createView的实现细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">createView</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.canHandle(viewName, locale)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String forwardUrl;</span><br><span class="line">         <span class="comment">//如果方法得到返回值是以redirect：开始的</span></span><br><span class="line">        <span class="keyword">if</span> (viewName.startsWith(<span class="string">"redirect:"</span>)) &#123;</span><br><span class="line">           forwardUrl = viewName.substring(<span class="string">"redirect:"</span>.length());</span><br><span class="line">           RedirectView view = <span class="keyword">new</span> RedirectView(forwardUrl,             <span class="keyword">this</span>.isRedirectContextRelative(), <span class="keyword">this</span>.isRedirectHttp10Compatible());</span><br><span class="line">            String[] hosts = <span class="keyword">this</span>.getRedirectHosts();</span><br><span class="line">            <span class="keyword">if</span> (hosts != <span class="keyword">null</span>) &#123;</span><br><span class="line">               view.setHosts(hosts);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span>.applyLifecycleMethods(<span class="string">"redirect:"</span>, view);</span><br><span class="line">             <span class="comment">//如果方法的返回值是以forward:开始的</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (viewName.startsWith(<span class="string">"forward:"</span>)) &#123;</span><br><span class="line">            forwardUrl = viewName.substring(<span class="string">"forward:"</span>.length());</span><br><span class="line">            InternalResourceView view = <span class="keyword">new</span> InternalResourceView(forwardUrl);</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span>.applyLifecycleMethods(<span class="string">"forward:"</span>, view);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//其他情况的处理,这里又有一个createView，它调用了父类的createView创建了一个默认的View对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.createView(viewName, locale);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下都是解析视图名的实现细节，感兴趣的可以看一下。</p><p>父类<code>AbstractCachingViewResolver类</code>的createView实现细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">createView</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> loadView(viewName, locale);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InternalResourceViewResolver</code>继承了<code>UrlBasedViewResolver</code><br><code>UrlBasedViewResolver类</code>中loadView方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">loadView</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AbstractUrlBasedView view = buildView(viewName);</span><br><span class="line">        View result = applyLifecycleMethods(viewName, view);</span><br><span class="line">        <span class="keyword">return</span> (view.checkResource(locale) ? result : <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>UrlBasedViewResolver的buildView方法会获取一个View对象，这个对象会将视图以什么格式呈现给用户，例如如果是jsp显示呈现给用户的话，那这个view对象就是JstlView，默认的是JstlView。在这个方法中我们看到了getPrefix() + viewName + getSuffix()这样一段代码，这就是对视图路径的一个拼接了，getPrefix()方法获取前缀，也就是我们在配置文件中配置的<code>&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/PAGE/&quot;/&gt;</code>的value中的值了,getSuffix()方法就是获取后缀值了，也就是我们在配置文件中配置的<code>&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</code>的value中的值。这样就将将视图的物理路径找到了，并赋值到View的URL属性中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AbstractUrlBasedView <span class="title">buildView</span><span class="params">(String viewName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   Class&lt;?&gt; viewClass = <span class="keyword">this</span>.getViewClass();</span><br><span class="line">   Assert.state(viewClass != <span class="keyword">null</span>, <span class="string">"No view class"</span>);</span><br><span class="line">   AbstractUrlBasedView view = (AbstractUrlBasedView)BeanUtils.instantiateClass(viewClass);</span><br><span class="line">   view.setUrl(<span class="keyword">this</span>.getPrefix() + viewName + <span class="keyword">this</span>.getSuffix());</span><br><span class="line">   String contentType = <span class="keyword">this</span>.getContentType();</span><br><span class="line">   <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">      view.setContentType(contentType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    view.setRequestContextAttribute(<span class="keyword">this</span>.getRequestContextAttribute());</span><br><span class="line">    view.setAttributesMap(<span class="keyword">this</span>.getAttributesMap());</span><br><span class="line">    Boolean exposePathVariables = <span class="keyword">this</span>.getExposePathVariables();</span><br><span class="line">    <span class="keyword">if</span> (exposePathVariables != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.setExposePathVariables(exposePathVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   Boolean exposeContextBeansAsAttributes = <span class="keyword">this</span>.getExposeContextBeansAsAttributes();</span><br><span class="line">    <span class="keyword">if</span> (exposeContextBeansAsAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.setExposeContextBeansAsAttributes(exposeContextBeansAsAttributes);</span><br><span class="line">     &#125;</span><br><span class="line">    String[] exposedContextBeanNames = <span class="keyword">this</span>.getExposedContextBeanNames();</span><br><span class="line">    <span class="keyword">if</span> (exposedContextBeanNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.setExposedContextBeanNames(exposedContextBeanNames);</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样我们得到了一个View对象，这个视图的name就是逻辑视图名，因为当将View对象放在缓存的时候，我们可以通过逻辑视图名在缓存中找出View对象。我们在获取到View对象的时候，我们还要将View进行渲染，并呈现给用户。</p><p>View是个接口,AbstractView实现了render方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(@Nullable Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="keyword">this</span>.logger.debug(<span class="string">"View "</span> + <span class="keyword">this</span>.formatViewName() + <span class="string">", model "</span> + (model != <span class="keyword">null</span> ? model : Collections.emptyMap()) + (<span class="keyword">this</span>.staticAttributes.isEmpty() ? <span class="string">""</span> : <span class="string">", static attributes "</span> + <span class="keyword">this</span>.staticAttributes));</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">//主要是将一些属性填充到Map中</span></span><br><span class="line">   Map&lt;String, Object&gt; mergedModel = <span class="keyword">this</span>.createMergedOutputModel(model, request, response);</span><br><span class="line">    <span class="comment">//对response头进行了一些属性设置</span></span><br><span class="line">    <span class="keyword">this</span>.prepareResponse(request, response);</span><br><span class="line">    <span class="comment">//渲染给页面输出的所有model数据</span></span><br><span class="line">    <span class="keyword">this</span>.renderMergedOutputModel(mergedModel, <span class="keyword">this</span>.getRequestToExpose(request), response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一行的renderMergedOutputModel方法由AbstractView的孙子类InternalResourceView实现InternalResourceView的renderMergedOutputModel方法帮我们获取到视图的物理路径，然后将这段路径传给RequestDispatcher对象，再调用RequestDispatcher的forward方法将页面呈现给用户，这样就走完了视图的解析了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">     exposeModelAsRequestAttributes(model, request);</span><br><span class="line">    <span class="comment">// Expose helpers as request attributes, if any.</span></span><br><span class="line">    exposeHelpers(request);</span><br><span class="line">    <span class="comment">// Determine the path for the request dispatcher.</span></span><br><span class="line">    String dispatcherPath = prepareForRendering(request, response);</span><br><span class="line">    <span class="comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span></span><br><span class="line">    RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);</span><br><span class="line">    <span class="keyword">if</span> (rd == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not get RequestDispatcher for ["</span> + getUrl() + <span class="string">"]: Check that the corresponding file exists within your web application archive!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If already included or response already committed, perform include, else forward.</span></span><br><span class="line">        <span class="keyword">if</span> (useInclude(request, response)) &#123;</span><br><span class="line">            response.setContentType(getContentType());</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">             logger.debug(<span class="string">"Including resource ["</span> + getUrl() + <span class="string">"] in InternalResourceView '"</span> + getBeanName() + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            rd.include(request, response);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Note: The forwarded resource is supposed to determine the content type itself.</span></span><br><span class="line">          <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Forwarding to resource ["</span> + getUrl() + <span class="string">"] in InternalResourceView '"</span> + getBeanName() + <span class="string">"'"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">             <span class="comment">//对请求进行转发，至此结束了视图解析解析过程</span></span><br><span class="line">           rd.forward(request, response);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后一句话总结：<br><font color="red">视图解析器只是为了得到视图对象；视图对象才是真正的转发（将模型数据发在request域中数据）或重定向到页面（视图对象才是真正的渲染视图）。</font></strong></p><center><a href="https://sm.ms/image/uheCvrxoblOK73t" target="_blank"><img src="https://i.loli.net/2019/08/07/uheCvrxoblOK73t.png"></a></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringMVC视图解析&quot;&gt;&lt;a href=&quot;#SpringMVC视图解析&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC视图解析&quot;&gt;&lt;/a&gt;SpringMVC视图解析&lt;/h3&gt;&lt;p&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;对于控制器
      
    
    </summary>
    
      <category term="Spring" scheme="http://easyblog.top/categories/Spring/"/>
    
    
      <category term="SpringMVC基础" scheme="http://easyblog.top/tags/SpringMVC%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC处理模型参数</title>
    <link href="http://easyblog.top/2019/08/07/SpringMVC-%E5%A4%84%E7%90%86%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0/"/>
    <id>http://easyblog.top/2019/08/07/SpringMVC-处理模型参数/</id>
    <published>2019-08-07T06:14:42.000Z</published>
    <updated>2019-08-07T06:30:15.642Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SpringMVC-提供了以下几种途径输出模型数据"><a href="#SpringMVC-提供了以下几种途径输出模型数据" class="headerlink" title="SpringMVC 提供了以下几种途径输出模型数据:"></a>SpringMVC 提供了以下几种途径输出模型数据:</h4><ul><li><strong><font color="red" size="4">ModelAndView</font></strong>: 处理方法返回值类型为 ModelAndView时, 方法体即可通过该对象添加模型数据</li><li><strong><font color="red" size="4">Map、Model以及ModelMap</font></strong>:入参为org.springframework.ui.Model、org.springframework.ui.ModelMap 或 Java.uti.Map 时，处理方法返回时，Map中的数据会自动添加到模型中。</li><li><strong><font color="red" size="4">@SessionAttributes</font></strong>: 将模型中的某个属性暂存到HttpSession 中，以便多个请求之间可以共享这个属性</li><li><strong><font color="red" size="4"> @ModelAttribute</font></strong>: 方法入参标注该注解后, 入参的对象就会放到数据模型中。</li><li>当然，除了上面这些SpringMVC提供的几种方法，SpringMVC支持直接使用Servlet几个原生API来给页面传值: <code>HttpServletRequest request</code>、<code>HttpservletResponse response</code>、<code>HttpSession session</code>、<code>InputStream/Reader 对应request.getInputStream()</code>、<code>OutputStream/Writer 对应response.getOutputStram()</code><hr></li></ul><h4 id="servlet原生API给页面传值"><a href="#servlet原生API给页面传值" class="headerlink" title="servlet原生API给页面传值"></a><font color="green">servlet原生API给页面传值</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用servlet原生API给页面输出数据</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"handler01"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">handler01</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                         HttpSession session)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">     request.setAttribute(<span class="string">"msg"</span>,<span class="string">"你好，这是HelloController"</span>);</span><br><span class="line">     session.setAttribute(<span class="string">"msg"</span>,<span class="string">"json123"</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>页面测试代码:<code>success.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;table border=<span class="string">"1px"</span> width=<span class="string">"70%"</span> &gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;域&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;值&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;requestScope&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;$&#123;requestScope.msg&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;sessionScope&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;$&#123;sessionScope.msg&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;applicationScope&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;$&#123;applicationScope.msg&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;pageScope&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;$&#123;pageScope.msg&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试结果：<br><a href="https://sm.ms/image/eXMQwoIg9RShkpB" target="_blank"><img src="https://i.loli.net/2019/08/07/eXMQwoIg9RShkpB.png"></a></p><h4 id="Model、Map、ModelMap"><a href="#Model、Map、ModelMap" class="headerlink" title="Model、Map、ModelMap"></a><font color="green">Model、Map、ModelMap</font></h4><p>首先通过通过源码看看他们三者的关系：<br><code>ModelMap类</code><br><a href="https://sm.ms/image/uYWZTjhPgtSNFGd" target="_blank"><img src="https://i.loli.net/2019/08/07/uYWZTjhPgtSNFGd.png"></a></p><p><code>Model接口</code><br><a href="https://sm.ms/image/y4p71xTtdgYvLhE" target="_blank"><img src="https://i.loli.net/2019/08/07/y4p71xTtdgYvLhE.png"></a></p><p><code>ExtendModelMap类</code><br><a href="https://sm.ms/image/2m6PHJQB1YnsNxr" target="_blank"><img src="https://i.loli.net/2019/08/07/2m6PHJQB1YnsNxr.png"></a></p><p><code>BindingAwareModelMap类</code><br><a href="https://sm.ms/image/xNhiS56XRomwGry" target="_blank"><img src="https://i.loli.net/2019/08/07/xNhiS56XRomwGry.png"></a></p><p>通过打开源码，我们不难总结出如下继承关系 ：<br><a href="https://sm.ms/image/MhHJA6cxYNk1nsG" target="_blank"><img src="https://i.loli.net/2019/08/07/MhHJA6cxYNk1nsG.png"></a></p><p><font size="4">接下来看看他们的用法：</font><br><font size="3">示例代码</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler02"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler02</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Model"</span>+model.getClass());</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"大家好！这是handler02"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"id"</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler03"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler03</span><span class="params">(Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Map:"</span>+map.getClass());</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"handler03"</span>);</span><br><span class="line">        map.put(<span class="string">"logged"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用ModelMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler04"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler04</span><span class="params">(ModelMap modelMap)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ModelMap:"</span>+modelMap.getClass());</span><br><span class="line">        modelMap.addAttribute(<span class="string">"msg"</span>,<span class="string">"handler04"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>页面代码和上面样</p><p>测试结果：<br>页面的显示：<br><a href="https://sm.ms/image/WvtYzBmaxk7LfMK" target="_blank"><img src="https://i.loli.net/2019/08/07/WvtYzBmaxk7LfMK.png"></a></p><p><a href="https://sm.ms/image/YpJWiH5dQwhSykj" target="_blank"><img src="https://i.loli.net/2019/08/07/YpJWiH5dQwhSykj.png"></a></p><p><a href="https://sm.ms/image/vIikTXWz3tnCubS" target="_blank"><img src="https://i.loli.net/2019/08/07/vIikTXWz3tnCubS.png"></a></p><p>控制台打印的信息:<br><a href="https://sm.ms/image/TvnF316kMtj2lw7" target="_blank"><img src="https://i.loli.net/2019/08/07/TvnF316kMtj2lw7.png"></a></p><blockquote><p> <strong>从测试结果可以总结出：<br>Model(SpringMVC接口)其中一个实现类是ExtendedModelMap<br>ModelMap是Map(JDK的接口)Map的一个实现类,并且ModelMap被ExtendedModelMap<br>ExtendedModelMap被BindingAwareModelMap继承<br>Model、Map、ModelMap不论用哪个，最终工作的都是BindingAwareModelMap,而且从测试结果可以看到通过这三个设置的值，SpringMVC都把他们放在了request域中。</strong></p></blockquote><h4 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a><font color="green">ModelAndView</font></h4><blockquote><p>目标方法的返回值可以是ModelAndView类型，从名字上就可以看到，这是一个既包括模型(Model)又有视图(View)的一个类， 然而事实也确实如此，他的model就可以理解为送给页面的数据，他的View可以理解为目标页面地址。但我们在他的model中放入值后，SpringMVC会把ModelAndView的model中数据放在request域对象中。</p></blockquote><p><font size="3">示例代码</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法的返回值可以是 ModelAndView类型，这样我们可以把值设置在model中</span></span><br><span class="line"><span class="comment"> * 然后springmvc会把ModelAndView的model中数据放在request域对象中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handler05"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handler05</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ModelAndView mv=<span class="keyword">new</span> ModelAndView(<span class="string">"success"</span>);</span><br><span class="line">    mv.addObject(<span class="string">"msg"</span>,<span class="string">"handler05"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><a href="https://sm.ms/image/qjsTKIJvu4V7Qa6" target="_blank"><img src="https://i.loli.net/2019/08/07/qjsTKIJvu4V7Qa6.png"></a></p><h4 id="使用-SessionAttributes注解"><a href="#使用-SessionAttributes注解" class="headerlink" title="使用@SessionAttributes注解"></a><font color="green">使用@SessionAttributes注解</font></h4><p>如果希望在多个请求之间共用某个模型属性数据，则可以在控制器类标注一个 @SessionAttributes，SpringMVC 会将模型中对应的属性暂存到 HTTPSession 中。<br>@SessionAttributes 除了可以通过属性名指定需要放到会话中的属性外，还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中。</p><ol><li>@SessionAttributes(types=User.class)会将隐含模型中所有类型为 User 的属性添加到会话中</li><li>@SessionAttributes(value={“user1”, “user2”})将名为 user1 和 user2 的模型属性添加到会话中</li><li>@SessionAttributes(types={“User.class”, “Dept.class”})将模型中所有类型为 User 及 Dept 的属性添加到会话中</li><li>@SessionAtributes(value={“user1”, “user2”}, types={Dept.class})将名为 user1 和 user2 的模型属性添加到会话中，同时将所有类型为 Dept 的模型属性添加到会话中<br><strong>总之：<br>当使用@SessionAttributes注解时就是告诉SpringMVC,当@SessionAttributes中的value值和BindingAwareModelMap的key一样时，那么在session也你也给我保存一份相同的值</strong><br><font size="4">示例代码：</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用的时候一定要注意@SessionAttributes只能用在类上</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(value=&#123;<span class="string">"id"</span>,<span class="string">"logged"</span>&#125;)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler0"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sessionAttributesTest</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"handler0"</span>);   <span class="comment">//这个会在request中显示</span></span><br><span class="line">        model.addAttribute(<span class="string">"logged"</span>,<span class="keyword">new</span> Date());   <span class="comment">//会在session中显示</span></span><br><span class="line">        model.addAttribute(<span class="string">"id"</span>,<span class="string">"001"</span>);         <span class="comment">//会在session中显示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>页面代码对success.jsp中的sessionScope稍作修改：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;tr&gt;</span><br><span class="line">     &lt;th&gt;sessionScope&lt;/th&gt;</span><br><span class="line">     &lt;td&gt;$&#123;sessionScope.msg&#125; | $&#123;sessionScope.id&#125; |$&#123;sessionScope.logged&#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><p>测试结果：<br><a href="https://sm.ms/image/rpLn2aQ73EdJcPS" target="_blank"><img src="https://i.loli.net/2019/08/07/rpLn2aQ73EdJcPS.png"></a></p><h4 id="使用-ModelAttribute注解"><a href="#使用-ModelAttribute注解" class="headerlink" title="使用@ModelAttribute注解"></a>使用@ModelAttribute注解</h4><p>先来看看ModelAttribute的定义：<br><a href="https://sm.ms/image/LZCvYSrNxUJts8m" target="_blank"><img src="https://i.loli.net/2019/08/07/LZCvYSrNxUJts8m.png"></a><br>查看 @ModelAttribute注解定义可以看到这个注解可以用在方法和参数中。 在 SpringMVC 的 Controller 中使用 @ModelAttribute 时，应用情况包括下面几种：<br>1、应用在方法上。<br>2、应用在方法的参数上。<br>3、应用在方法上，并且方法也使用了@RequestMapping</p><p><font size="4">示例代码：</font><br>修改图书信息的页面：</p><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC给页面输出数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--    &lt;a href="handler01"&gt;原生API输出数据&lt;/a&gt;&lt;br/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler02"</span>&gt;</span>Model输出数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler03"</span>&gt;</span>Map输出数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler04"</span>&gt;</span>ModelMap输出数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler05"</span>&gt;</span>ModelAndView带回返回值<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>--&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>更新图书信息<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"update"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        书名：<span class="tag">&lt;<span class="name">label</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        作者：<span class="tag">&lt;<span class="name">label</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">placeholder</span>=<span class="string">"输入价格..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        库存：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"stock"</span> <span class="attr">placeholder</span>=<span class="string">"输入库存..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        销量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"sales"</span> <span class="attr">placeholder</span>=<span class="string">"输入销量..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>提交图书修改信息后的页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2019</span>/<span class="number">8</span>/<span class="number">7</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">34</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;更新图书&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;div style=<span class="string">"height: 200px;width: 100%"</span>&gt;</span><br><span class="line">        &lt;h3&gt;提交的书籍的信息：&lt;/h3&gt;</span><br><span class="line">        &lt;table border=<span class="string">"1px"</span> width=<span class="string">"50%"</span>&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;书名&lt;/th&gt;&lt;td&gt;$&#123;book.name&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;作者&lt;/th&gt;&lt;td&gt;$&#123;book.author&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;价格&lt;/th&gt;&lt;td&gt;$&#123;book.price&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;库存&lt;/th&gt;&lt;td&gt;$&#123;book.stock&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;销量&lt;/th&gt;&lt;td&gt;$&#123;book.sales&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果没有使用@ModelAttribute，那么要更新数据信息，必须要全字段更新，即使你不需要更新的的字段，你也要填写，这显然不和常理，因为如果你不填写这个值，值就会为null。最主要是因为SpringMVC在封装提交的信息的时候只会new一个Book对象，里面的属性的值初始就是null。你没有填写也只会以null存到数据库。<br><strong>不使用@ModelAttribute进行非全字段更新</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Book book)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新图书的信息......页面提交过来的图书信息："</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"updateBook"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>测试结果:<br>页面的显示：<br><a href="https://sm.ms/image/VEDqmp1C9kXRhM5" target="_blank"><img src="https://i.loli.net/2019/08/07/VEDqmp1C9kXRhM5.png"></a></p><p><a href="https://sm.ms/image/FmjsoYHJQc7DCBA" target="_blank"><img src="https://i.loli.net/2019/08/07/FmjsoYHJQc7DCBA.png"></a></p><p>看看控制台的打印信息：<br><a href="https://sm.ms/image/PCKZOAcpzXdSfrT" target="_blank"><img src="https://i.loli.net/2019/08/07/PCKZOAcpzXdSfrT.png"></a></p><p>可以看到果然不出预料的出问题了，更新信息后书名和作者的信息没了。这就相当于你更改了一下你的QQ密码，然后你的QQ号没了！这是很可怕的事情。<br>使用@ModelAttribute解决问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.Contorller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.Address;</span><br><span class="line"><span class="keyword">import</span> bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用在方法上：这个方法就会优先于该类中的左右处理器方法先执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBook</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//模拟从数据库中查询图书数据</span></span><br><span class="line">        Book book=<span class="keyword">new</span> Book();</span><br><span class="line">        book.setName(<span class="string">"西游记"</span>);</span><br><span class="line">        book.setPrice(<span class="number">9.98</span>);</span><br><span class="line">        book.setAuthor(<span class="string">"吴承恩"</span>);</span><br><span class="line">        book.setSales(<span class="number">300</span>);</span><br><span class="line">        book.setStock(<span class="number">400</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据库中查询到Book的信息："</span>+book);</span><br><span class="line">        map.put(<span class="string">"book"</span>,book);</span><br><span class="line">        System.out.println(<span class="string">"ModelAttribute将查询到的图书信息保存起来.......："</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以告诉SpringMVC,你不要去new Book对象了，我已经从数据库中查询到了，你直接拿过去用就好了。</span></span><br><span class="line"><span class="comment">     * 问题是：如何告诉SpringMVC来用这个已经处理好的Book对象呢？</span></span><br><span class="line"><span class="comment">     * 这就是<span class="doctag">@ModelAttribute</span>在参数位置的用法：</span></span><br><span class="line"><span class="comment">     * 下面的<span class="doctag">@ModelAttribute</span>("book")，就是告诉SpringMVC，去拿一个key为</span></span><br><span class="line"><span class="comment">     * book的值，你不要重新new一个Book对象了，这样做的好处是可以只更改有更新的数据，没有更新的就保持原始值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@ModelAttribute(<span class="string">"book"</span>)</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新图书的信息......页面提交过来的图书信息："</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"updateBook"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br>页面展示的结果：</p><p><a href="https://sm.ms/image/oHbxw4j9AdvWeis" target="_blank"><img src="https://i.loli.net/2019/08/07/oHbxw4j9AdvWeis.png"></a></p><p>控制台打印的信息：<br><a href="https://sm.ms/image/TODtoyBfzX9N4si" target="_blank"><img src="https://i.loli.net/2019/08/07/TODtoyBfzX9N4si.png"></a></p><p>而且从控制台打印的信息来看，被@ModelAttribute标识的方法确实是在处理器方法之前执行了</p><h5 id="Modelattribute的原理"><a href="#Modelattribute的原理" class="headerlink" title="@Modelattribute的原理"></a>@Modelattribute的原理</h5><p>废话不多说，直接看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.Contorller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.Address;</span><br><span class="line"><span class="keyword">import</span> bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: HuangXin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 10:33 2019/8/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj1;</span><br><span class="line">    <span class="keyword">private</span> Object b1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以告诉SpringMVC,你不要去new Book对象了，我已经从数据库中查询到了，你直接拿过去用就好了。</span></span><br><span class="line"><span class="comment">     * 问题是：如何告诉SpringMVC来用这个已经处理好的Book对象呢？</span></span><br><span class="line"><span class="comment">     * 这就是<span class="doctag">@ModelAttribute</span>在参数位置的用法：</span></span><br><span class="line"><span class="comment">     * 下面的<span class="doctag">@ModelAttribute</span>("book")，就是告诉SpringMVC，你去拿一个key为book的值，</span></span><br><span class="line"><span class="comment">     * 你不要重新new一个Book对象了</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@ModelAttribute(<span class="string">"book"</span>)</span> Book book, Map&lt;String,Object&gt; model)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理器方法的map:"</span>+model.getClass());</span><br><span class="line">        System.out.println(<span class="string">"book==b1=&gt;"</span>+(book==b1));</span><br><span class="line">        System.out.println(<span class="string">"obj1==model=&gt;"</span>+(obj1==model));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"更新图书的信息......页面提交过来的图书信息："</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"updateBook"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用在方法上：这个方法就会优先于该类中的左右处理器方法先执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBook</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//模拟从数据库中拿数据</span></span><br><span class="line">        Book book=<span class="keyword">new</span> Book();</span><br><span class="line">        book.setName(<span class="string">"西游记"</span>);</span><br><span class="line">        book.setPrice(<span class="number">9.98</span>);</span><br><span class="line">        book.setAuthor(<span class="string">"吴承恩"</span>);</span><br><span class="line">        book.setSales(<span class="number">300</span>);</span><br><span class="line">        book.setStock(<span class="number">400</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据库中查询到Book的信息："</span>+book);</span><br><span class="line"></span><br><span class="line">        obj1=map;</span><br><span class="line">        b1=book;</span><br><span class="line">        map.put(<span class="string">"book"</span>,book);</span><br><span class="line">        System.out.println(<span class="string">"@ModelAttribute中的map:"</span>+map.getClass());</span><br><span class="line">        System.out.println(<span class="string">"ModelAttribute将查询到的图书信息保存起来.......："</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><a href="https://sm.ms/image/26Zl3AnfXPmDoNg" target="_blank"><img src="https://i.loli.net/2019/08/07/26Zl3AnfXPmDoNg.png"></a></p><p>最后总结为一张图：<br><a href="https://sm.ms/image/2TzY8fFvo6yJmdO" target="_blank"><img src="https://i.loli.net/2019/08/07/2TzY8fFvo6yJmdO.png"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;SpringMVC-提供了以下几种途径输出模型数据&quot;&gt;&lt;a href=&quot;#SpringMVC-提供了以下几种途径输出模型数据&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC 提供了以下几种途径输出模型数据:&quot;&gt;&lt;/a&gt;SpringMVC 
      
    
    </summary>
    
      <category term="Spring" scheme="http://easyblog.top/categories/Spring/"/>
    
    
      <category term="SpringMVC基础知识" scheme="http://easyblog.top/tags/SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC获取请求参数</title>
    <link href="http://easyblog.top/2019/08/06/Springmvc/"/>
    <id>http://easyblog.top/2019/08/06/Springmvc/</id>
    <published>2019-08-06T11:24:59.000Z</published>
    <updated>2019-08-07T06:30:26.033Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一种方式：方法的形参上给一个和请求参数同名的参数"><a href="#第一种方式：方法的形参上给一个和请求参数同名的参数" class="headerlink" title="第一种方式：方法的形参上给一个和请求参数同名的参数"></a>第一种方式：方法的形参上给一个和请求参数同名的参数</h4><h5 id="1-获得普通类型的参数值"><a href="#1-获得普通类型的参数值" class="headerlink" title="1.获得普通类型的参数值"></a>1.获得普通类型的参数值</h5><p><font size="4">示例代码</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第1种获得请求参数的方式：在方法的形参上给一个和请求参数同名的参数，</span></span><br><span class="line"><span class="comment"> *  之后SpringMVC会帮我们自动注入参数值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/welcome"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">welcome</span><span class="params">(String username, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"用户名："</span>+username);</span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>,username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-获得POJO类型的值"><a href="#2-获得POJO类型的值" class="headerlink" title="2.获得POJO类型的值"></a>2.获得POJO类型的值</h5><p><font size="4">示例代码：</font><br>新建Book.java以及Address.java两个POJO<br><code>Book.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> Integer stock;   <span class="comment">//库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer sales;   <span class="comment">//销量</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Address address;  <span class="comment">//地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略getter、setter方法，并且重写toString()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Address.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String county;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略getter、setter方法，并且重写toString()方法</span></span><br></pre></td></tr></table></figure><p>写一个简单的表单：<br><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMvc获取参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>录入书籍信息<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"book"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        书名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"输入书名..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        作者：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">placeholder</span>=<span class="string">"输入作者..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">placeholder</span>=<span class="string">"输入价格..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        库存：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"stock"</span> <span class="attr">placeholder</span>=<span class="string">"输入库存..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        销量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"sales"</span> <span class="attr">placeholder</span>=<span class="string">"输入销量..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address.province"</span> /&gt;</span>省&amp;nbsp;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address.city"</span> /&gt;</span>市&amp;nbsp;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address.county"</span> /&gt;</span>(区/县)&amp;nbsp;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交后的页面：<br><code>book.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span></span><br><span class="line">    <span class="keyword">import</span>=<span class="string">"com.xzy.bean.*"</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;SpringMVC获取参数&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;div style=<span class="string">"height: 200px;width: 100%"</span>&gt;</span><br><span class="line">        &lt;h3&gt;提交的书籍的信息：&lt;/h3&gt;</span><br><span class="line">        &lt;table border=<span class="string">"1px"</span> width=<span class="string">"50%"</span>&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;书名&lt;/th&gt;&lt;td&gt;$&#123;book.name&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;作者&lt;/th&gt;&lt;td&gt;$&#123;book.author&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;价格&lt;/th&gt;&lt;td&gt;$&#123;book.price&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;库存&lt;/th&gt;&lt;td&gt;$&#123;book.stock&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;销量&lt;/th&gt;&lt;td&gt;$&#123;book.sales&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;地区&lt;/th&gt;&lt;td&gt;$&#123;book.address&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>提供一个控制器：<br><code>BookContorller.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xzy.bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookContorller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SprningMVC帮我们自动注入参数到POJO类型中，而且还可以级联注入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addbook</span><span class="params">(Book book, HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印得到的book信息</span></span><br><span class="line">        System.out.println(book);</span><br><span class="line">        request.setAttribute(<span class="string">"book"</span>,book);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"book"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://i.loli.net/2019/08/06/faohYdzNDuIHK8X.png" alt="QQ截图20190804124754.png"><br><img src="https://i.loli.net/2019/08/06/WJq562cSw3K4Ven.png" alt="20190804124807.png"></p><h4 id="第二种方式：使用Spring提供的注解"><a href="#第二种方式：使用Spring提供的注解" class="headerlink" title="第二种方式：使用Spring提供的注解"></a>第二种方式：使用Spring提供的注解</h4><h5 id="1-使用-RequestParam-获取参数"><a href="#1-使用-RequestParam-获取参数" class="headerlink" title="1. 使用@RequestParam 获取参数"></a>1. 使用@RequestParam 获取参数</h5><p>分析<code>@RequestParam</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestParam &#123;</span><br><span class="line">    <span class="comment">//默认值就是它，表示请求参数的key</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"name"</span>)</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//请求参数的值</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">    </span><br><span class="line">   <span class="comment">//设置这个参数是否必须，required=false表示这个参数不是必须的</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//参数的默认值</span></span><br><span class="line">    <span class="function">String <span class="title">defaultValue</span><span class="params">()</span> <span class="keyword">default</span> "\n\t\t\n\t\t\n\ue000\ue001\ue002\n\t\t\t\t\n"</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="4">示例代码：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestParam设置获取参数的key为user,required=false表示这个参数不是必须的，</span></span><br><span class="line"><span class="comment"> * defaultValue是这个参数的默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestParam</span>(value = "user", required = false, defaultValue = "") String username；</span></span><br><span class="line"><span class="comment"> * 等价于以前写的：</span></span><br><span class="line"><span class="comment"> * String user=null!=request.getParameter("user")?request.getParameter("user"):"";</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/welcome3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">welocme3</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(value = <span class="string">"user"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">""</span>)</span> String username, Model model) </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-使用-RequestHeader获得请求的头部信息"><a href="#2-使用-RequestHeader获得请求的头部信息" class="headerlink" title="2.使用@RequestHeader获得请求的头部信息"></a>2.使用@RequestHeader获得请求的头部信息</h5><p><code>@RequestHeader</code>和<code>@ReuqestParma</code>的实现方式如出一辙，使用方法也基本相同。<br><font size="4">示例代码1：</font>使用RequestHeader注解获得浏览器的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  <span class="doctag">@RequestHeader</span>(value = "User-Agent",required = false,defaultValue = "") String userAgent</span></span><br><span class="line"><span class="comment">    *  获取请求头中的值，相当于以前写的：</span></span><br><span class="line"><span class="comment">    *  String header=null!=request.getHeader("User-Agent")?      request.getHeader("User-Agent"):"";</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userAgent</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/welcome4"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">welocme4</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           @RequestParam(value = <span class="string">"user"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">""</span>)</span> String username,</span></span><br><span class="line"><span class="function">           @<span class="title">RequestHeader</span><span class="params">(value = <span class="string">"User-Agent"</span>,defaultValue = <span class="string">""</span>)</span> String userAgent,</span></span><br><span class="line"><span class="function">           Model model) </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line">       System.out.println(<span class="string">"User-Agent"</span>+userAgent);</span><br><span class="line">       model.addAttribute(<span class="string">"userAgent"</span>,userAgent);</span><br><span class="line">       model.addAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><font size="4">示例代码2：</font>使用RequestHeader注解获取请求头部的Cookie信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用RequestHeader获得请求头中的Cookie的全部信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cookie</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/welcome5"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">welocome5</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           @RequestParam(value = <span class="string">"user"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">""</span>)</span> String username,</span></span><br><span class="line"><span class="function">           @<span class="title">RequestHeader</span><span class="params">(value = <span class="string">"Cookie"</span>,required = <span class="keyword">false</span>,defaultValue = <span class="string">""</span>)</span> String cookie,</span></span><br><span class="line"><span class="function">            Model model)</span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line">       model.addAttribute(<span class="string">"cookie"</span>,cookie);</span><br><span class="line">       model.addAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="3-使用CookieValue获得请求头部的JSESSIONID"><a href="#3-使用CookieValue获得请求头部的JSESSIONID" class="headerlink" title="3.使用CookieValue获得请求头部的JSESSIONID"></a>3.使用CookieValue获得请求头部的JSESSIONID</h5><p><font size="4">示例代码：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用SpringMVC提供的<span class="doctag">@CookieValue</span>注解，可以只获的JSESSIONID的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookie</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/welcome6"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">welocome6</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"user"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">""</span>)</span> String username,</span></span><br><span class="line"><span class="function">            @<span class="title">CookieValue</span><span class="params">(value = <span class="string">"JSESSIONID"</span> ,required = <span class="keyword">false</span>,defaultValue = <span class="string">""</span>)</span> String cookie,</span></span><br><span class="line"><span class="function">            Model model)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line">        model.addAttribute(<span class="string">"cookie"</span>,cookie);</span><br><span class="line">        model.addAttribute(<span class="string">"username"</span>, username);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"cookie："</span>+cookie);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第一种方式：方法的形参上给一个和请求参数同名的参数&quot;&gt;&lt;a href=&quot;#第一种方式：方法的形参上给一个和请求参数同名的参数&quot; class=&quot;headerlink&quot; title=&quot;第一种方式：方法的形参上给一个和请求参数同名的参数&quot;&gt;&lt;/a&gt;第一种方式：方法的形参
      
    
    </summary>
    
      <category term="Spring" scheme="http://easyblog.top/categories/Spring/"/>
    
    
      <category term="SpringMVC基础知识" scheme="http://easyblog.top/tags/SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>认识Spring框架</title>
    <link href="http://easyblog.top/2019/08/05/%E8%AE%A4%E8%AF%86Spring%E6%A1%86%E6%9E%B6/"/>
    <id>http://easyblog.top/2019/08/05/认识Spring框架/</id>
    <published>2019-08-05T11:24:59.000Z</published>
    <updated>2019-08-07T06:35:58.780Z</updated>
    
    <content type="html"><![CDATA[<center><a href="https://sm.ms/image/ybdINa9BSxQvpu3" target="_blank"><img src="https://i.loli.net/2019/08/07/ybdINa9BSxQvpu3.png"></a></center><p>Spring 框架是 Java 应用最广的框架，它的成功来源于理念，而不是技术本身，它的理念包括 IoC (Inversion of Control，控制反转) 和 AOP(Aspect Oriented Programming，面向切面编程)。</p><h4 id="什么是-Spring："><a href="#什么是-Spring：" class="headerlink" title="什么是 Spring："></a>什么是 Spring：</h4><p>1). Spring 是一个轻量级的 DI / IoC 和 AOP 容器的开源框架，来源于 Rod Johnson 在其著作《Expert one on one J2EE design and development》中阐述的部分理念和原型衍生而来。<br>2).Spring 提倡以“最少侵入”的方式来管理应用中的代码，这意味着我们可以随时安装或者卸载 Spring<br>3).适用范围：任何 Java 应用<br>4).Spring 的根本使命：简化 Java 开发</p><h4 id="Spring-中常用术语："><a href="#Spring-中常用术语：" class="headerlink" title="Spring 中常用术语："></a>Spring 中常用术语：<ul></ul></h4><li><strong><font color="red">框架</font></strong>：是能完成一定功能的半成品。框架能够帮助我们完成的是：项目的整体框架、一些基础功能、规定了类和对象如何创建，如何协作等，当我们开发一个项目时，框架帮助我们完成了一部分功能，我们自己再完成一部分，那这个项目就完成了。</li><li><strong><font color="red">非侵入式设计</font></strong>：从框架的角度可以理解为：无需继承框架提供的任何类这样我们在更换框架时，之前写过的代码几乎可以继续使用。</li><li><strong><font color="red">轻量级和重量级</font></strong>：轻量级是相对于重量级而言的，轻量级一般就是非入侵性的、所依赖的东西非常少、资源占用非常少、部署简单等等，其实就是比较容易使用，而重量级正好相反。</li><li><strong><font color="red">JavaBean</font></strong>：即符合 JavaBean 规范的 Java 类</li><li><strong><font color="red">POJO</font></strong>：即 Plain Old Java Objects，简单老式 Java 对象它可以包含业务逻辑或持久化逻辑，但不担当任何特殊角色且不继承或不实现任何其它Java框架的类或接口。</li>> 注意：bean 的各种名称——虽然 Spring 用 bean 或者 JavaBean 来表示应用组件，但并不意味着 Spring 组件必须遵循 JavaBean 规范，一个 Spring 组件可以是任意形式的 POJO。<li><strong><font color="red">容器</font></strong>：在日常生活中容器就是一种盛放东西的器具，从程序设计角度看就是装对象的的对象，因为存在放入、拿出等操作，所以容器还要管理对象的生命周期。<h4 id="Spring-的优势"><a href="#Spring-的优势" class="headerlink" title="Spring 的优势"></a>Spring 的优势<ul></ul></h4></li><li><strong><font color="red">低侵入 / 低耦合</font></strong> （降低组件之间的耦合度，实现软件各层之间的解耦）</li><li><strong><font color="red">声明式事务管理</font></strong>（基于切面和惯例）</li><li><strong><font color="red">方便集成其他框架</font></strong>（如MyBatis、Hibernate）</li><li><strong><font color="red">降低 Java 开发难度</font></strong></li><li>Spring 框架中包括了 J2EE 三层的每一层的解决方案（一站式）</li><h4 id="Spring能帮我们做什么"><a href="#Spring能帮我们做什么" class="headerlink" title="Spring能帮我们做什么"></a>Spring能帮我们做什么</h4><p>①.Spring 能帮我们根据配置文件<strong><font color="red">创建及组装对象之间的依赖关系。</font></strong><br>②.Spring <strong><font color="red">面向切面编程能帮助我们无耦合的实现日志记录，性能统计，安全控制。</font></strong><br>③.Spring 能非常简单的帮我们<strong><font color="red">管理数据库事务。</font></strong><br>④.Spring 还<strong><font color="red">提供了与第三方数据访问框架</font></strong>（如Hibernate、JPA）无缝集成，而且自己也提供了一套JDBC访问模板来方便数据库访问。<br>⑤.Spring 还<strong><font color="red">提供与第三方Web（如Struts1/2、JSF）框架无缝集成，而且自己也提供了一套Spring MVC框架，来方便web层搭建。</font></strong><br>⑥.Spring 能方便的与Java EE（如Java Mail、任务调度）整合，与更多技术整合（比如缓存框架）。</p><h4 id="Spring的框架体系结构："><a href="#Spring的框架体系结构：" class="headerlink" title="Spring的框架体系结构："></a><font color="green">Spring的框架体系结构：</font></h4><center><a href="https://sm.ms/image/fJtpaAD2kgbEoC9" target="_blank"><img src="https://i.loli.net/2019/08/07/fJtpaAD2kgbEoC9.png"></a></center><blockquote><ul><li>Data Access/Integration层包含有JDBC、ORM、OXM、JMS和Transaction模块。</li><li>Web层包含了Web、Web-Servlet、WebSocket、Web-Porlet模块。</li><li>AOP模块提供了一个符合AOP联盟标准的面向切面编程的实现。</li><li>Core Container(核心容器)：包含有Beans、Core、Context和SpEL模块。</li><li>Test模块支持使用JUnit和TestNG对Spring组件进行测试。</li></ul></blockquote><p>下面介绍这5个部分的jar以及依赖关系</p><h5 id="Core"><a href="#Core" class="headerlink" title="Core"></a><strong><font size="5">Core</font></strong></h5><p>core部分包含4个模块:<br>spring-core：依赖注入IoC与DI的最基本实现<br>spring-beans：Bean工厂与bean的装配<br>spring-context：spring的context上下文即IoC容器<br>spring-expression：spring表达式语言<br>它们的依赖关系</p><center><a href="https://sm.ms/image/L5HkeilJMW9KSqE" target="_blank"><img src="https://i.loli.net/2019/08/07/L5HkeilJMW9KSqE.png"></a></center><h5 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a><strong><font size="5">AOP</font></strong></h5><p>aop部分包含4个模块:<br>spring-aop：面向切面编程<br>spring-aspects：集成AspectJ<br>spring-instrument：提供一些类级的工具支持和ClassLoader级的实现，用于服务器<br>spring-instrument-tomcat：针对tomcat的instrument实现<br>它们的依赖关系</p><center><a href="https://sm.ms/image/S7glAo4NLy21n8C" target="_blank"><img src="https://i.loli.net/2019/08/07/S7glAo4NLy21n8C.png"></a></center><h5 id="Data-Access"><a href="#Data-Access" class="headerlink" title="Data Access"></a><strong><font size="5">Data Access</font></strong></h5><p>data access部分包含5个模块<br>spring-jdbc：jdbc的支持<br>spring-tx：事务控制<br>spring-orm：对象关系映射，集成orm框架<br>spring-oxm：对象xml映射<br>spring-jms：java消息服务<br>它们的依赖关系</p><center><a href="https://sm.ms/image/TJpHVwaIQZSGNYF" target="_blank"><img src="https://i.loli.net/2019/08/07/TJpHVwaIQZSGNYF.png"></a></center><h5 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong><font size="5">Web</font></strong></h5><p>web部分包含4个模块<br>spring-web：基础web功能，如文件上传<br>spring-webmvc：mvc实现<br>spring-webmvc-portlet：基于portlet的mvc实现<br>spring-struts：与struts的集成，不推荐，spring4不再提供<br>它们的依赖关系</p><center><a href="https://sm.ms/image/hRxDqY5cN19sUj8" target="_blank"><img src="https://i.loli.net/2019/08/07/hRxDqY5cN19sUj8.png"></a></center><h5 id="Test"><a href="#Test" class="headerlink" title="Test"></a><strong><font size="5">Test</font></strong></h5><p>test部分只有一个模块，我将spring-context-support也放在这吧<br>spring-test：spring测试，提供junit与mock测试功能<br>spring-context-support：spring额外支持包，比如邮件服务、视图解析等<br>它们的依赖关系</p><center><a href="https://sm.ms/image/yLUt2bvmcPBSTMw" target="_blank"><img src="https://i.loli.net/2019/08/07/yLUt2bvmcPBSTMw.png"></a></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;
&lt;a href=&quot;https://sm.ms/image/ybdINa9BSxQvpu3&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://i.loli.net/2019/08/07/ybdINa9BSxQvpu3.png&quot;&gt;&lt;/a&gt;
&lt;/c
      
    
    </summary>
    
      <category term="Spring" scheme="http://easyblog.top/categories/Spring/"/>
    
    
      <category term="Spring基础" scheme="http://easyblog.top/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
