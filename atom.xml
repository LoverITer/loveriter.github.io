<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LoveITer</title>
  
  <subtitle>欢迎访问我的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://easyblog.top/"/>
  <updated>2019-08-13T16:12:19.120Z</updated>
  <id>http://easyblog.top/</id>
  
  <author>
    <name>黄鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC文件下载和上传</title>
    <link href="http://easyblog.top/2019/08/13/SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%92%8C%E4%B8%8A%E4%BC%A0/"/>
    <id>http://easyblog.top/2019/08/13/SpringMVC文件下载和上传/</id>
    <published>2019-08-13T14:33:06.000Z</published>
    <updated>2019-08-13T16:12:19.120Z</updated>
    
    <content type="html"><![CDATA[<h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p><font color="black">文件下载的最重要的一点是设置响应头的<code>Content-disposition</code>为<code>attachmen;filename=要下载的文件的名字</code>,然后得到文件的输入流写入本地即可</font><br><font color="black">1. 常规方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一种文件下载的方法：使用原生的Servlet API</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filename 下载的文件名，SpringMVC会根据请求参数自动注入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/download1"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(@ResuestParam(<span class="string">"filename"</span>)</span>String fileName, </span></span><br><span class="line"><span class="function">HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">//解析文件在服务器中的真实路径</span></span><br><span class="line">String filePath = request.getServletContext().getRealPath(<span class="string">"/download/"</span> + fileName);</span><br><span class="line"><span class="comment">//System.out.println(filePath);</span></span><br><span class="line"></span><br><span class="line">BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置响应头告诉客户端浏览器，这个请求是要下载文件</span></span><br><span class="line"><span class="keyword">long</span> fileLength = <span class="keyword">new</span> File(filePath).length();</span><br><span class="line">response.setContentType(<span class="string">"application/x-msdownload;"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment;filename="</span> + fileName);</span><br><span class="line">response.setHeader(<span class="string">"Content-Length"</span>, String.valueOf(fileLength));</span><br><span class="line"></span><br><span class="line"><span class="comment">//向客户端浏览器写文件数据</span></span><br><span class="line">bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(filePath));</span><br><span class="line">bos = <span class="keyword">new</span> BufferedOutputStream(response.getOutputStream());</span><br><span class="line"><span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span> (-<span class="number">1</span> != (len = bis.read(buff, <span class="number">0</span>, buff.length))) &#123;</span><br><span class="line">bos.write(buff, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != bis) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bis.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != bos) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="black">2. 使用SpringMVC提供的 ResponseEntity&lt;T&gt;类型，使用它可以很方便地定义返回的HttpHeaders和HttpStatus。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *第二种文件下载的方式：使用SpringMVC提供的esponseEntity类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filename   下载的文件的名字，通过前端页面的请求参数带过来后SpringMVC会自动注入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/download2"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; download(String filename, HttpServletRequest request) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(filename);</span><br><span class="line"><span class="comment">//得到文件在服务器上的真实物理路径</span></span><br><span class="line">String filePath = request.getServletContext().getRealPath(<span class="string">"/download/"</span> + filename);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个把下载文件转成byte[]的办法：一种是把要下载的文件封装成一个File对象，把这个对象交给FileCopyUtils.copyToByteArray(file)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 另一种方法是：自己写一个转换的方法，如下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*FileInputStream fis = new FileInputStream(filePath);</span></span><br><span class="line"><span class="comment">byte[] file = new byte[fis.available()];</span></span><br><span class="line"><span class="comment">fis.read();</span></span><br><span class="line"><span class="comment">fis.close();*/</span></span><br><span class="line"></span><br><span class="line">String downFileName = <span class="keyword">new</span> String(filename.getBytes(<span class="string">"utf-8"</span>), <span class="string">"iso-8859-1"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line"><span class="comment">//这是文件下载关键:设置contentDisposition为attachment</span></span><br><span class="line">headers.setContentDispositionFormData(<span class="string">"attachment"</span>, downFileName);</span><br><span class="line">headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(FileCopyUtils.copyToByteArray(file), headers, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="black">下载页面</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">pageContext.setAttribute(<span class="string">"ctp"</span>,request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;下载高清图片&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;高清壁纸下载&lt;/h2&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;</span><br><span class="line">&lt;img src=<span class="string">"../..$&#123;ctp&#125;/download/18.jpg"</span> width=<span class="string">"420px"</span> height=<span class="string">"320px"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download1?filename=18.jpg"&gt;使用Servlet API下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download2?filename=18.jpg"&gt;使用SpringMVC框架下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;th&gt;</span><br><span class="line">&lt;img src=<span class="string">"../..$&#123;ctp&#125;/download/13.jpg"</span> width=<span class="string">"420px"</span> height=<span class="string">"320px"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download1?filename=13.jpg"&gt;使用Servlet API下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download2?filename=13.jpg"&gt;使用SpringMVC框架下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;th&gt;</span><br><span class="line">&lt;img src=<span class="string">"../..$&#123;ctp&#125;/download/14.jpg"</span> width=<span class="string">"420px"</span> height=<span class="string">"320px"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download1?filename=14.jpg"&gt;使用Servlet API下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download2?filename=14.jpg"&gt;使用SpringMVC框架下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;</span><br><span class="line">&lt;img src=<span class="string">"../..$&#123;ctp&#125;/download/15.jpg"</span> width=<span class="string">"420px"</span> height=<span class="string">"320px"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download1?filename=15.jpg"&gt;使用Servlet API下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download2?filename=15.jpg"&gt;使用SpringMVC框架下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;th&gt;</span><br><span class="line">&lt;img src=<span class="string">"../..$&#123;ctp&#125;/download/16.jpg"</span> width=<span class="string">"420px"</span> height=<span class="string">"320px"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download1?filename=16.jpg"&gt;使用Servlet API下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download2?filename=16.jpg"&gt;使用SpringMVC框架下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;th&gt;</span><br><span class="line">&lt;img src=<span class="string">"../..$&#123;ctp&#125;/download/17.jpg"</span> width=<span class="string">"420px"</span> height=<span class="string">"320px"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download1?filename=17.jpg"&gt;使用Servlet API下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;button&gt;&lt;a href="download2?filename=17.jpg"&gt;使用SpringMVC框架下载&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><font color="black">测试结果</font></p><center><a href="https://sm.ms/image/JEgOqwfbFTs1eXx" target="_blank"><img src="https://i.loli.net/2019/08/13/JEgOqwfbFTs1eXx.gif" width="100%"></a></center><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>文件上传这里使用的是<code>commons-fileupload-1.4</code>,他需要依赖<code>commons-io</code>,他们的Maven依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="black">1. 单文件上传</font><br><font color="black"><li>上传表单页面</li></font><br><font color="black">文件上传需要将表单的提交方法设置为post，将enctype的值设置为”multipart/form-data”。</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--单文件上传--&gt;</span><br><span class="line">&lt;h3&gt;单文件上传&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;ctp&#125;/uploadImg"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    头像： &lt;input type=<span class="string">"file"</span> name=<span class="string">"headerImg"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;button type="submit"&gt;提交&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><font color="black"><li>控制器</li></font><br><font color="black">在Controller的处理方法中，使用MultipartFile对象作为参数接收前端上传过来的文件</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个文件上传</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/uploadImg"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ImgUpload</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@RequestParam(<span class="string">"username"</span>)</span> String userName,</span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"headerImg"</span>)</span> MultipartFile file,</span></span><br><span class="line"><span class="function">HttpServletRequest request,</span></span><br><span class="line"><span class="function">Model model) </span>&#123;</span><br><span class="line"></span><br><span class="line">String date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到服务器上传文件的文件夹物理路径</span></span><br><span class="line">String realPath = request.getServletContext().getRealPath(<span class="string">"/upload/"</span>);</span><br><span class="line">File dir=<span class="keyword">new</span> File(realPath+date+<span class="string">"//"</span>);</span><br><span class="line"><span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line"><span class="keyword">boolean</span> res=dir.mkdir();</span><br><span class="line"><span class="keyword">if</span>(!res)&#123;</span><br><span class="line">model.addAttribute(<span class="string">"msg"</span>, <span class="string">"文件上传失败！请重试！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析文件后缀名</span></span><br><span class="line">String fileName = file.getOriginalFilename();</span><br><span class="line">String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>), fileName.length());</span><br><span class="line"><span class="keyword">if</span>(<span class="string">".jpg"</span>.equals(suffix)||<span class="string">".png"</span>.equals(suffix)||<span class="string">".gif"</span>.equals(suffix)||<span class="string">".jpeg"</span>.equals(suffix)||<span class="string">"bmp"</span>.equals(suffix)) &#123;</span><br><span class="line"><span class="comment">//给上传的文件重新命名</span></span><br><span class="line">File newFileName = <span class="keyword">new</span> File(dir.toString() + <span class="string">"//"</span> + System.currentTimeMillis() + suffix);</span><br><span class="line"><span class="comment">//保存文件到服务器</span></span><br><span class="line">file.transferTo(newFileName);</span><br><span class="line">model.addAttribute(<span class="string">"msg"</span>, <span class="string">"文件上传成功！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">model.addAttribute(<span class="string">"msg"</span>,<span class="string">"文件上传失败！只支持jpeg, jpg, png, gif, bmp 格式的图片文件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">model.addAttribute(<span class="string">"msg"</span>, <span class="string">"文件上传失败！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"fileUpLoad"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="black"><li>在springmvc配置文件中注册文件上传组件</li></font><br><font color="black">使用MultipartFile对象接收前端上传过来的文件，还需要在springmvc的配置文件中进行如下配置：</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文件上传解析器的id是固定的，必须是multipartResolver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传的文件总大小50M--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"#&#123;1024*1024*50&#125;"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单个文件最大5M--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSizePerFile"</span> <span class="attr">value</span>=<span class="string">"#&#123;1024*1024*5&#125;"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--默认的字符编码：utf-8--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>多文件上传<br><font color="black">其实多文件上传也很简单，单文件上传是在Controller的处理方法中使用MultipartFile对象作为参数接收前端上传过来的文件，而多文件上传则使用MultipartFile对象数组来接收。</font></li></ol><p><font color="black"><li>页面</li></font><br><font color="black">该页面中有几个name值一样的file类型的input标签，其他跟单文件上传的页面没区别。</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;一次选一个文件，一次提交上传多个文件&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;ctp&#125;/upload2"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    头像： &lt;input type=<span class="string">"file"</span> name=<span class="string">"headerImg"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    图片： &lt;input type=<span class="string">"file"</span> name=<span class="string">"headerImg"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    资料： &lt;input type=<span class="string">"file"</span> name=<span class="string">"headerImg"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    文件： &lt;input type=<span class="string">"file"</span> name=<span class="string">"headerImg"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;button type="submit"&gt;提交&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><font color="black"><li>控制器</li></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpLoadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String userName,</span></span><br><span class="line"><span class="function"> @<span class="title">RequestParam</span><span class="params">(<span class="string">"headerImg"</span>)</span> MultipartFile[] files,</span></span><br><span class="line"><span class="function"> HttpServletRequest request,</span></span><br><span class="line"><span class="function"> Model model) </span>&#123;</span><br><span class="line">String realPath = request.getServletContext().getRealPath(<span class="string">"/upload/"</span>);</span><br><span class="line">File dir = <span class="keyword">new</span> File(realPath + date +<span class="string">"//"</span>+userName+<span class="string">"//"</span>);</span><br><span class="line"><span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line"><span class="keyword">boolean</span> res = dir.mkdirs();</span><br><span class="line"><span class="keyword">if</span> (!res) &#123;</span><br><span class="line">model.addAttribute(<span class="string">"msg"</span>, <span class="string">"文件上传失败！请重试！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">uploadFile(dir.toString(), file, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"fileUpLoad"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String path, MultipartFile file, Model model)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">String fileName = file.getOriginalFilename();</span><br><span class="line">String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>), fileName.length());</span><br><span class="line"><span class="comment">//给上传的文件重新命名</span></span><br><span class="line">File newFileName = <span class="keyword">new</span> File(path + <span class="string">"//"</span> + System.currentTimeMillis() + suffix);</span><br><span class="line">System.out.println(newFileName);</span><br><span class="line"><span class="comment">//保存文件到服务器</span></span><br><span class="line">file.transferTo(newFileName);</span><br><span class="line">model.addAttribute(<span class="string">"msg"</span>, <span class="string">"文件上传成功！"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">model.addAttribute(<span class="string">"msg"</span>, <span class="string">"文件上传失败！"</span> + e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="black">同样的，使用MultipartFile数组接收前端上传过来的多个文件，也需要在springmvc的配置文件进行配置，具体配置与上述单文件上传的springmvc.xml配置没差别。这样，就可以进行多文件上传了。</font></p><p><strong><font color="black">多种文件上传情景综合</font></strong><br><font color="black">当然，项目开发中，场景可能并不是这么简单，上述的多文件上传是一个个文件选择后一起上传（即多个name相同的input标签），那要是我项目中只要一个input标签就可以一次性多个文件呢？又或者一个页面中既要一个个选择的多文件上传，又要一次性选择的多文件上传，还要有单文件上传呢？没问题，<code>MultipartFile[]</code>通吃，代码也很easy，下面直接上代码。</font></p><p><font color="black">页面</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   pageContext.setAttribute(<span class="string">"ctp"</span>,request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;ctp&#125;/upload3"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;!--一次选择一个文件的多文件上传--&gt;</span><br><span class="line">    头像： &lt;input type=<span class="string">"file"</span> name=<span class="string">"headerImg"</span>/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--一次选择一个文件的多文件上传 --&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"img"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"img"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"img"</span>/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--一次选多个文件的多文件上传 --&gt;</span><br><span class="line">    图片：&lt;input type=<span class="string">"file"</span> name=<span class="string">"pic"</span> multiple/&gt;&lt;br/&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;button type="submit"&gt;提交&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><font color="4">控制器</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String userName,</span></span><br><span class="line"><span class="function"> @<span class="title">RequestParam</span><span class="params">(<span class="string">"headerImg"</span>)</span> MultipartFile[] files1,</span></span><br><span class="line"><span class="function"> @<span class="title">RequestParam</span><span class="params">(<span class="string">"img"</span>)</span> MultipartFile[] files2,</span></span><br><span class="line"><span class="function"> @<span class="title">RequestParam</span><span class="params">(<span class="string">"pic"</span>)</span> MultipartFile[] files3,</span></span><br><span class="line"><span class="function"> HttpServletRequest request,</span></span><br><span class="line"><span class="function"> Model model) </span>&#123;</span><br><span class="line">String realPath = request.getServletContext().getRealPath(<span class="string">"/upload/"</span>);</span><br><span class="line">File dir = <span class="keyword">new</span> File(realPath + date +<span class="string">"//"</span>+userName+<span class="string">"//"</span>);</span><br><span class="line"><span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line"><span class="keyword">boolean</span> res = dir.mkdirs();</span><br><span class="line"><span class="keyword">if</span> (!res) &#123;</span><br><span class="line">model.addAttribute(<span class="string">"msg"</span>, <span class="string">"文件上传失败！请重试！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (MultipartFile file : files1) &#123;</span><br><span class="line">uploadFile(dir.toString(), file, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (MultipartFile file : files2) &#123;</span><br><span class="line">uploadFile(dir.toString(), file, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (MultipartFile file : files3) &#123;</span><br><span class="line">uploadFile(dir.toString(), file, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"fileUpLoad"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String path, MultipartFile file, Model model)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">String fileName = file.getOriginalFilename();</span><br><span class="line">String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>), fileName.length());</span><br><span class="line"><span class="comment">//给上传的文件重新命名</span></span><br><span class="line">File newFileName = <span class="keyword">new</span> File(path + <span class="string">"//"</span> + System.currentTimeMillis() + suffix);</span><br><span class="line">System.out.println(newFileName);</span><br><span class="line"><span class="comment">//保存文件到服务器</span></span><br><span class="line">file.transferTo(newFileName);</span><br><span class="line">model.addAttribute(<span class="string">"msg"</span>, <span class="string">"文件上传成功！"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">model.addAttribute(<span class="string">"msg"</span>, <span class="string">"文件上传失败！"</span> + e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="black">测试结果<font></font></font></p><center><a href="https://sm.ms/image/IWrjyb6CkhRYOPa" target="_blank"><img src="https://i.loli.net/2019/08/13/IWrjyb6CkhRYOPa.gif"></a></center><p><font color="black">MultipartFile[]就是如此强大，不管单个多个，逻辑处理一样，所以建议在项目开发中使用MultipartFile[]作为文件的接收参数。</font></p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a><font color="red">拓展</font></h4><p><font color="black"><strong>1、MutipartFile类的一些常用方法：</strong></font></p><ul><li><font color="black"><strong>String getContentType()  //获取文件MIME类型</strong></font></li><li><font color="black"><strong>InputStream getInputStream()  //获取文件流</strong></font></li><li><font color="black"><strong>String getName()  //获取表单中文件组件的名字</strong></font></li><li><font color="black"><strong>String getOriginalFilename()  //获取上传文件的原名</strong></font></li><li><font color="black"><strong>long getSize()  //获取文件的字节大小，单位byte</strong></font></li><li><font color="black"><strong>boolean isEmpty() //是否为空</strong></font></li><li><font color="black"><strong>void transferTo(File dest)   //保存文件到服务器指定路径</strong></font></li></ul><p><font color="black"><strong>2、CommonsMultipartResolver的属性解析</strong></font></p><ul><li><font color="black"><strong>defaultEncoding：表示用来解析request请求的默认编码格式，当没有指定的时候根据Servlet规范会使用默认值ISO-8859-1。当request自己指明了它的编码格式的时候就会忽略这里指定的defaultEncoding。</strong></font></li><li><font color="black"><strong>uploadTempDir：设置上传文件时的临时目录，默认是Servlet容器的临时目录。</strong></font></li><li><font color="black"><strong>maxUploadSize：设置允许上传的总的最大文件大小，以字节为单位计算。当设为-1时表示无限制，默认是-1。</strong></font></li><li><font color="black"><strong>maxUploadSizePerFile：跟maxUploadSize差不多，不过maxUploadSizePerFile是限制每个上传文件的大小，而maxUploadSize是限制总的上传文件大小。</strong></font></li><li><font color="black"><strong>maxInMemorySize：设置在文件上传时允许写到内存中的最大值，以字节为单位计算，默认是10240。</strong></font></li><li><font color="black"><strong>resolveLazily：为true时，启用推迟文件解析，以便在UploadAction中捕获文件大小异常。</strong></font></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;文件下载&quot;&gt;&lt;a href=&quot;#文件下载&quot; class=&quot;headerlink&quot; title=&quot;文件下载&quot;&gt;&lt;/a&gt;文件下载&lt;/h4&gt;&lt;p&gt;&lt;font color=&quot;black&quot;&gt;文件下载的最重要的一点是设置响应头的&lt;code&gt;Content-dispositio
      
    
    </summary>
    
      <category term="Spring框架" scheme="http://easyblog.top/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="http://easyblog.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC对Ajax异步请求的支持</title>
    <link href="http://easyblog.top/2019/08/11/SpringMVC%E5%AF%B9Ajax%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>http://easyblog.top/2019/08/11/SpringMVC对Ajax异步请求的支持/</id>
    <published>2019-08-11T15:46:55.000Z</published>
    <updated>2019-08-13T16:06:54.894Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Ajax异步请求概念"><a href="#Ajax异步请求概念" class="headerlink" title="Ajax异步请求概念"></a><font color="black">Ajax异步请求概念</font></h4><h5 id="AJAX-Ansyc-Javascript-And-Xml-异步请求"><a href="#AJAX-Ansyc-Javascript-And-Xml-异步请求" class="headerlink" title="AJAX: Ansyc Javascript And Xml (异步请求)."></a><font color="black">AJAX: Ansyc Javascript And Xml (异步请求).</font></h5><p><font color="black">异步是指基于Ajax的应用与服务器通信的方法。对于传统的Web应用，每次用户发送请求或向服务器请求获得新数据时，浏览器都会完全丢弃当前页面，而等待重新加载的页面。在服务器完全响应之前，用户浏览器将是一片空白，用户的动作必须中断。异步是指用户发送请求后，完全无须等待，请求在后台发送，不会阻塞用户的当前活动，用户无须等待第一次请求得到完全响应，就可以立即发送第二次请求。简单的说,异步请求不会刷新当前html页面。<br>异步指的是服务器端响应数据的获取方式。</font></p><p><font size="black">同步：</font></p><center><a href="https://sm.ms/image/LpqeiH1gnAcmvDy" target="_blank"><img src="https://i.loli.net/2019/08/11/LpqeiH1gnAcmvDy.png" width="100%"></a></center><p><font size="black">异步：</font></p><center><a href="https://sm.ms/image/tDIUm2LGMx6uC8c" target="_blank"><img src="https://i.loli.net/2019/08/11/tDIUm2LGMx6uC8c.png" width="100%"></a></center><h5 id="异步-amp-同步的区别"><a href="#异步-amp-同步的区别" class="headerlink" title="异步&amp;同步的区别"></a><font color="black">异步&amp;同步的区别</font></h5><p><font color="black">1.同步请求：</font></p><p><font color="black">请求的过程：浏览器(当前的html页面会丢弃) —&gt; http协议 —&gt; Web服务器(tomcat)</font></p><p>响应的过程：Web服务器(tomcat) —&gt; http协议 –&gt; 返回一个新html页面.<br></p><p><font color="black">2.异步请求：</font></p><p><font color="black">请求的过程：浏览器(当前的html页面不会丢弃) —&gt; Ajax引擎(http协议) —&gt; Web服务器(tomcat)</font></p><p>响应的过程：Web服务器(tomcat) —&gt; 准备部分数据 –&gt; Ajax引擎(http协议) –&gt; DOM编程.</p><p>总而言之，异步请求只是局部刷新页面，同步请求会全部刷新当前的页面</p><h4 id="jQuery框架的异步请求和处理"><a href="#jQuery框架的异步请求和处理" class="headerlink" title="jQuery框架的异步请求和处理"></a><font color="black">jQuery框架的异步请求和处理</font></h4><p><strong><font color="black">1.$.ajax([settings]) </font></strong>—jQuery核心处理异步请求的方法：<br>语法：</p><blockquote><p>$.ajax([settings])</p></blockquote><p><font color="black">最简单的情况下，$.ajax() 可以不带任何参数直接使用。具体语法格式都有哪些参数请参照：<a href="https://www.w3school.com.cn/jquery/ajax_ajax.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/jquery/ajax_ajax.asp</a></font></p><p><strong><font color="black">2.$.post()</font></strong><br><font color="black"> $.post() 方法通过 HTTP POST 请求从服务器上请求数据。<br>语法：</font></p><blockquote><p> $.post(url, data, function(data, status){<br>// status(状态码): success 、error<br>// data : 响应数据<br>}, dataType);</p></blockquote><p><font color="black">必需的 URL 参数规定您希望请求的 URL。<br>可选的 data 参数规定连同请求发送的数据。<br>可选的 function 参数是请求成功后所执行的函数名,其中data是响应的数据，status是状态码<br>可选的dataType参数是服务器响应返回的数据</font></p><p><strong><font color="black">3.$.get()</font></strong><br><font color="black"> $.get() 方法通过 HTTP GET 请求从服务器上请求数据。</font></p><blockquote><p>$.get(url, data, function(data, status){<br>// status(状态码): success 、error<br>// data : 响应数据<br>}, dataType);</p></blockquote><p><font color="black">必需的 URL 参数规定您希望请求的 URL。<br>可选的 data 参数规定连同请求发送的数据。<br>可选的 function 参数是请求成功后所执行的函数名,其中data是响应的数据，status是状态码<br>可选的dataType参数是服务器响应返回的数据</font></p><h4 id="springMVC支持ajax异步请求和处理返回json数据"><a href="#springMVC支持ajax异步请求和处理返回json数据" class="headerlink" title="springMVC支持ajax异步请求和处理返回json数据"></a><font color="black">springMVC支持ajax异步请求和处理返回json数据</font></h4><h5 id="数据绑定-RequestBody-ResponseBody"><a href="#数据绑定-RequestBody-ResponseBody" class="headerlink" title="数据绑定@RequestBody/@ResponseBody"></a><font color="black">数据绑定@RequestBody/@ResponseBody</font></h5><p><strong>&lt;/font size=4&gt;@RequestBody</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;功能 ：用于将HttpServletRequest的getInputStream()的内容绑定到方法入参<br>例如：</p><blockquote><p>@RequestMapping(value = “/hello”)<br> public String handleRequest(@RequestBody String body){<br>         //body参数就被请求参数自动绑定<br>}</p></blockquote><p><strong>&lt;/font size=4&gt;@ResponseBody</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;功能：被ResponseBody修饰的方法的返回值会被作为响应体</p><blockquote><p>@RequestMapping(value = “/hello”)<br>@ResponseBody<br> public User handleRequest(Ueser user){</p><p>  return User;      //返回值会被作为响应体，而且如果返回值是对象时SpringMVC会自动转换成JSON给页面<br>}</p></blockquote><h5 id="使用-RequestBody-ResponseBody来支持Ajax"><a href="#使用-RequestBody-ResponseBody来支持Ajax" class="headerlink" title="使用@RequestBody/@ResponseBody来支持Ajax"></a><font color="black">使用@RequestBody/@ResponseBody来支持Ajax</font></h5><p><font color="black">可以使用@RequestBody来自动获取Ajax上传的数据，同时也可以使用@ResponseBody，把要返回的对象自动拼成JSON的格式返回。当然，需要加入几个jackson的包，这里加入了：<br>jackson-core-2.9.3.jar、jackson-annotations-2.9.3.jar、jackson-databind-2.9.3.jar，Maven依赖如下：</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--jackson的三个依赖包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ResponseBody:用于将ResponseBody方法的返回值作为响应体</span></span><br><span class="line"><span class="comment"> * RequestBody:用于将HttpServletRequest的getInputStream()内容绑定到入参</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/getAllUserByAJAX"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUserByAJAX</span><span class="params">(@ModelAttribute(<span class="string">"users"</span>)</span> List&lt;User&gt; users) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestBody：将请求体的数据绑定到入参</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRequestBody"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testRequestBody</span><span class="params">(@RequestBody User user, Model model)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"请求的数据："</span>+user);</span><br><span class="line">model.addAttribute(<span class="string">"requestInfo"</span>, user);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提前把全部信息查询好放在隐含模型中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ModelAttribute</span>(<span class="string">"users"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">IUserService userService = <span class="keyword">new</span> IUserServiceImpl();</span><br><span class="line">List&lt;User&gt; lists = userService.getUser(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">model.addAttribute(<span class="string">"users"</span>, lists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="black"> 1. 通过AJAX获得服务器数据的页面：</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Date"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  pageContext.setAttribute(<span class="string">"ctp"</span>, request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">&lt;script src="https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   $().ready(function () &#123;</span><br><span class="line">$(<span class="string">"#first"</span>).click(function () &#123;</span><br><span class="line">alert(<span class="string">"adacd"</span>);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">"$&#123;ctp&#125;/getAllUserByAJAX"</span>,</span><br><span class="line">type: <span class="string">"GET"</span>,</span><br><span class="line">success: function (data) &#123;</span><br><span class="line"><span class="comment">//console.log(data)</span></span><br><span class="line">$.each(data, function () &#123;</span><br><span class="line"><span class="keyword">var</span> userInfo = <span class="keyword">this</span>.name + <span class="string">"---"</span> + <span class="keyword">this</span>.age + <span class="string">"---"</span> + <span class="keyword">this</span>.email;</span><br><span class="line">$(<span class="string">"#user"</span>).append(userInfo + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%=<span class="keyword">new</span> Date()%&gt;</span><br><span class="line">&lt;div id=<span class="string">"user"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;a id="first" href="$&#123;ctp&#125;/getAllUserByAJAX"&gt;获取全部用户信息&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>测试结果</strong></p><center><a href="https://sm.ms/image/mYgvTEf1IOryKUM" target="_blank"><img src="https://i.loli.net/2019/08/11/mYgvTEf1IOryKUM.gif" width="100%"></a></center><p><font color="black">2. 通过AJAX向服务器发JSON数据，服务器返回JSON数据</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   pageContext.setAttribute(<span class="string">"ctp"</span>, request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;script src="https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$().ready(function () &#123;</span><br><span class="line">   $(<span class="string">"#first"</span>).click(function () &#123;</span><br><span class="line"><span class="comment">//点击发送JSON数据给服务器</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">"$&#123;ctp&#125;/testRequestBody"</span>,</span><br><span class="line">type: <span class="string">"POST"</span>,</span><br><span class="line">contentType:<span class="string">"application/json"</span>,     <span class="comment">//请求的文本格式：json</span></span><br><span class="line">data: JSON.stringify(&#123;name: $(<span class="string">"#username"</span>).val(), age: $(<span class="string">"#userage"</span>).val(), email: $(<span class="string">"#userEmail"</span>).val()&#125;),  <span class="comment">//给服务器提交的数据</span></span><br><span class="line">dataType: <span class="string">"json"</span>,     <span class="comment">//服务器返回的数据类型</span></span><br><span class="line">success: function (data) &#123;</span><br><span class="line"><span class="keyword">var</span> userInfo = data.name + <span class="string">"---"</span> + data.age + <span class="string">"---"</span> + data.email;</span><br><span class="line">$(<span class="string">"#users"</span>).append(userInfo + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;ctp&#125;/testRequestBody"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;input id=<span class="string">"username"</span> name=<span class="string">"username"</span> type=<span class="string">"text"</span>/&gt;</span><br><span class="line">&lt;input id=<span class="string">"userage"</span> name=<span class="string">"age"</span> type=<span class="string">"text"</span>/&gt;</span><br><span class="line">&lt;input id=<span class="string">"userEmail"</span> name=<span class="string">"enail"</span> type=<span class="string">"email"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;button type="button"&gt;&lt;a id="first" href="$&#123;ctp&#125;/testRequestBody"&gt;AJAX发送JSON数据给服务器&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">&lt;div id=<span class="string">"users"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>测试结果</strong></p><center><a href="https://sm.ms/image/5BKupvAXGmfeJnU" target="_blank"><img src="https://i.loli.net/2019/08/11/5BKupvAXGmfeJnU.gif" width="100%"></a></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Ajax异步请求概念&quot;&gt;&lt;a href=&quot;#Ajax异步请求概念&quot; class=&quot;headerlink&quot; title=&quot;Ajax异步请求概念&quot;&gt;&lt;/a&gt;&lt;font color=&quot;black&quot;&gt;Ajax异步请求概念&lt;/font&gt;&lt;/h4&gt;&lt;h5 id=&quot;AJAX-A
      
    
    </summary>
    
      <category term="Spring框架" scheme="http://easyblog.top/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="http://easyblog.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC 数据绑定&amp;数据格式化&amp;数据校验</title>
    <link href="http://easyblog.top/2019/08/09/SpringMVC%20%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A&amp;%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96&amp;%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/"/>
    <id>http://easyblog.top/2019/08/09/SpringMVC 数据绑定&amp;数据格式化&amp;数据校验/</id>
    <published>2019-08-09T10:29:31.000Z</published>
    <updated>2019-08-11T16:11:46.084Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据绑定流程"><a href="#数据绑定流程" class="headerlink" title="数据绑定流程"></a>数据绑定流程</h4><ol><li>Spring MVC将ServletRequest对象及目标方法的入参实例传给WebDataBinderFactory实例，创建出DataBinder(数据绑定的核心部件)</li><li>DataBinder调用转配在SpringMVC上下文中的ConversionService组件进行数据类型转换、数据格式化。并将servlet中的请求信息填充到入参对象中</li><li>调用Validator组件对已经绑定好的请求消息的入参进行数据合法性校验，并最终生成数据绑定结果BindingResult对象</li><li>Spring MVC抽取BindingResult中的入参对象和检验错误对象，将他们赋给处理方法的响应入参</li><li>Spring MVC通过反射机制对目标方法进行解析，将请求消息绑定到处理方法的入参中。<center><a href="https://sm.ms/image/juMSVH7CmcZ9U2E" target="_blank"><img src="https://i.loli.net/2019/08/09/juMSVH7CmcZ9U2E.png" height="500px"></a></center></li></ol><h4 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h4><h5 id="2-1-ConversionService"><a href="#2-1-ConversionService" class="headerlink" title="2.1 ConversionService"></a>2.1 ConversionService</h5><ul><li>Spring MVC 上下文中内建了很多转换器，可完成大多数 Java 类型的转换工作。</li><li>Spring3.0 添加了一个通用的类型转换模块，位于 org.springframework.core.convert 包中</li><li><strong><font size="4">ConversionService 接口是类型转换的核心接口</font></strong></li></ul><table border="1px"><tr><th>Modifier and Type </th><th>Method and Description</th></tr><tr><td>boolean </td><td>canConvert(Class<?> sourceType, Class<?> targetType)判断是否可以将一个 java 类转换为另一个 java 类</td></tr><tr><td>boolean</td><td> canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)</td></tr>需转换的类将以成员变量的方式出现在宿主类中，TypeDescriptor 不但描述了需转换类的信息，还描述了从宿主类的上下文信息，如成员变量上的注解，成员是否是数组、集合或 Map 的方式呈现等<tr><td><t> T</t></td><td> convert(Object source, Class<t> targetType)将原类型对象转换为目标类型对象. </t></td></tr><tr><td>Object</td><td> convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)将对象从原类型对象转换为目标类型对象，此时往往会用到所在宿主类的上下文信息</td></tr></table><h5 id="2-2-自定义类型转换器"><a href="#2-2-自定义类型转换器" class="headerlink" title="2.2 自定义类型转换器"></a>2.2 自定义类型转换器</h5><p><font color="black">Spring 在 org.springframework.core.convert.converter 包中定义了 3 种类型转换器接口，实现任意一个转换器接口都可以作为自定义转换器注册到 ConversionServiceFactroyBean 中：</font></p><ul><li><font color="red" size="4">Converter&lt;S,T&gt;：将S类型对象转换为T类型对象</font></li><li>ConverterFactory：将相同系列多个Converter封装在一起.如果希望将一种类<br>型的对象转换为另一种类型及其子类的对象（例如将 String 转换为 Number 及<br>Number 子类（Integer、Long、Double 等）对象）可使用该转换器工厂类</li><li>GenericConverter：会根据源类对象及目标类对象所在的宿主类找那个的上下文信息进行类型转换</li></ul><p>ConverstionServiceFactoryBean 的 converters 属性可以接受 Converter、ConverterFactory、GenericConverter 或 ConditionalGenericConverter 接口的实现类，并把这些转换器的转换逻辑统一封装到一个 ConverstionService 实例对象中(GenericConversionService),Spring 在 Bean属性配置及 Spring MVC 请求消息绑定时将利用这个 ConversionService 实例完成类型转换工作。</p><p>实际应用中常用的是Converter&lt;S,T&gt;，下面通过他实现一个自定义的类型转换器：<br>关键步骤：</p><ol><li><strong>实现Converter接口，他有两个泛型，S:是转换前的了类型，T:是转换后的类型 ，实现Converter接口的conver方法，在方法中定制对S类型如何转换换成T类型的规则</strong></li><li><strong>在springmvc配置文件中将自定义的Converter配置在ConversionService中</strong></li><li><strong>告诉SpringMVC使用我们自定义的类型转换器</strong></li></ol><p>假设处理方法有一个 User 类型的入参，我们希望将一个格式化的请求字符串直接转为 User对象，该字符串格式如（小明:男:软件工程:软工3306班:1134556）</p><ul><li><p>编写自定义类型转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xzy.bean.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToStudentConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在这个方法中定义转换的规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">convert</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//param==&gt;小明:男:软件工程:软工3306班:17033309</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != param &amp;&amp; !<span class="string">""</span>.equals(param)) &#123;</span><br><span class="line">            String[] pa=param.split(<span class="string">":"</span>);</span><br><span class="line">            student.setName(pa[<span class="number">0</span>]);</span><br><span class="line">            student.setGender(pa[<span class="number">1</span>]);</span><br><span class="line">            student.setSclass(pa[<span class="number">2</span>]);</span><br><span class="line">            student.setMajor(pa[<span class="number">3</span>]);</span><br><span class="line">            student.setSid(pa[<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在SpringMVC配置文件中将自定义的Converter方在IOC容器中交给Spring管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--该 标 签 会 创 建 并 注 册 一 个 默 认 的 DefaultAnnotationHandlerMapping 和一个ReqeustMappingHandlerAdpter实现，除此之外&lt;mvc:annotaion-driven/&gt;标签还会注册一个默认的ConversionService（FormattingConversionServiceFactoryBean）以满足大多数类型转换 的需求 ，当用到自定义类型转换器时，需要用</span></span><br><span class="line"><span class="comment">&lt;mvc:annotation-driven conversion-service=”xxx”/&gt;覆盖默认--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置自定义的类型转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xzy.converter.StringToStudentConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>用<code>&lt;mvc:annotation-driven conversion-service=”xxx”/&gt;</code>覆盖默认的类型转换器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在&lt;mvc:annotation-driver中配置conversion-service覆盖默认的转换器&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.contorller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xzy.bean.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/addStudent"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addStudent</span><span class="params">(@RequestParam(<span class="string">"stuInfo"</span>)</span> Student student, Model model) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"封装的"</span> + student);</span><br><span class="line">        model.addAttribute(<span class="string">"stuinfo"</span>,student);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="4">测试结果：</font></p><center><a href="https://sm.ms/image/QulCxTK7yh9q6eD" target="_blank"><img src="https://i.loli.net/2019/08/09/QulCxTK7yh9q6eD.gif"></a></center><h4 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h4><p>Spring 使用转换器进行源类型对象到目标类型对象的转换，Spring 的转换不提供输入及<br>输出信息格式化工作，像日期、时间、数字、货币等数据都具有一定格式的，在不同的本地化环境中，同一类型的数还会相应地呈现不同的显示格式。<br>如何从格式化的数据中获取真正的数据以完成数据绑定，并将处理完成的数据输出为格<br>式化的数据，是 spring 格式化框架要解决的问题，Spring 引入了一个新的格式化框架，这个框架位于 org.springframework.format 类包中，其中最重要的一个接口 Formatter<t><br>Spring 的 org.springframework.format.datetime 包中提供了一个用于时间对象格式化的<br><code>DateFormatter 实现类</code>，而 org.springframework.format.number 包中提供了 3 个用于数字<br>对象格式化的实现类。</t></p><ul><li><code>NumberFormatter</code>:用于数字类型对象的格式化</li><li><code>CurrencyFormatter</code>:用于货币类型对象的格式化</li><li><code>PercentFormatter</code>: 用于百分数数字类型对象的格式化</li></ul><p>示例：<br>有一个员工类employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.NumberFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mame;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span>  Date birth;    <span class="comment">//生日</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示3位一个逗号，保留两位小数</span></span><br><span class="line">    <span class="meta">@NumberFormat</span>(pattern = <span class="string">"#,###.##"</span>)</span><br><span class="line">    <span class="keyword">private</span> Double salary;  <span class="comment">//薪水</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//省略getter、setter</span></span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"employee&#123;"</span> +</span><br><span class="line">                <span class="string">"mame='"</span> + mame + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birth="</span> + birth +</span><br><span class="line">                <span class="string">", salary="</span> + salary +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要使注解可以发挥作用还需要在注解中配置如下信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xzy.converter.StringToStudentConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;对属性对象的输入/输出进行格式化，从其本质上讲依然属于 “类型转换” 的范畴。Spring 在格式化模块中定义了一个实现 ConversionService 接口的FormattingConversionService 实现类，该实现类扩展了GenericConversionService，因此它既具有类型转换的功能，又具有格式化的功能。<br>&nbsp;&nbsp;&nbsp;&nbsp;FormattingConversionService 拥有FormattingConversionServiceFactroyBean 工厂类，后者用于在 Spring 上下文中构造前者FormattingConversionServiceFactroyBean 内部已经注册了 :<br>NumberFormatAnnotationFormatterFactroy：<br>支持对数字类型的属性使用 <font color="red">@NumberFormat </font>注解JodaDateTimeFormatAnnotationFormatterFactroy：支持对日期类型的属性使用  <font color="red">@DateTimeFormat  </font>注解<br>装配了 FormattingConversionServiceFactroyBean 后，就可 以在 Spring MVC 入<br>参绑定及模型数据输出时使用注解驱动了。<br><code>&lt;mvc:annotation-driven/&gt;</code>默认创建的ConversionService 实例即为 FormattingConversionServiceFactroyBean.</p><h4 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h4><p>应用程序在执行业务逻辑前，必须通过数据校验保证接收到的输入数据是正确合法的，如代表生日的日期应该是一个过去的时间、工资的数值必须是一个整数等。一般情况下，应用程序的开发时分层的，不同层的代码由不同的开发人员负责。很多时候，同样的数据验证会出现在不同的层中，这样就会导致代码冗余，违反了DRY原则。为了避免这样的情况，最好将验证逻辑和响应的域模型进行绑定，将代码验证的逻辑集中起来管理。</p><h5 id="JSR-303"><a href="#JSR-303" class="headerlink" title="JSR-303"></a>JSR-303</h5><p>  JSR-303是Java为Bean数据合法校验锁提供的标准框架，它已经包含在JavaEE 6.0中。JSR-303通过在Bean属性上标注类似于@NotNull、@Max等标准的注解指定校验规则，并通过标准的验证接口对Bean进行验证。可以通过<a href="http://jcp.org/en/jsr/detail?id=303了解更多详细内容。" target="_blank" rel="noopener">http://jcp.org/en/jsr/detail?id=303了解更多详细内容。</a><br>JSR-303定义了一套可标注在成员变量、属性方法上的校验注解：</p><center><a href="https://sm.ms/image/IiaoJEY3H4ZeM7V" target="_blank"><img src="https://i.loli.net/2019/08/09/IiaoJEY3H4ZeM7V.png"></a></center>JSR-303 支持 XML 风格的和注解风格的验证，接下来我们首先看一下如何和 Spring 集成。1. 导入jar包,此处使用 Hibernate-validator 实现（版本：hibernate-validator-6.0.17.Final-dist.zip），他的Maven依赖如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.17.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>在Spring配置中添加JSR-303验证框架支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置对JSR-303的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"validator"</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"providerClass"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.validator.HibernateValidator"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过 ConfigurableWebBindingInitializer 注册 validator</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册validator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"webBinding"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.bind.support.ConfigurableWebBindingInitializer"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"conversionService"</span> <span class="attr">ref</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validator"</span> <span class="attr">ref</span>=<span class="string">"validator"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 JSR-303 验证框架注解为模型对象指定验证信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.xzy.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Size</span>(min = <span class="number">7</span>,max=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">private</span> String sid;    <span class="comment">//学号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Pattern</span>(regexp = <span class="string">"/^(0|86|17951)?(13[0-9]|15[012356789]|166|17[3678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/"</span>)</span><br><span class="line"><span class="keyword">private</span> String phone;   <span class="comment">//手机号码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@NotBlank</span></span><br><span class="line"><span class="keyword">private</span> String sclass;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> String major;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//省略getter、setter</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line"><span class="string">"姓名：'"</span> + name + <span class="string">'\''</span> +</span><br><span class="line"><span class="string">", 学号：'"</span> + sid + <span class="string">'\''</span> +</span><br><span class="line"><span class="string">", 手机：'"</span> +phone + <span class="string">'\''</span> +</span><br><span class="line"><span class="string">", 班级：'"</span> + sclass + <span class="string">'\''</span> +</span><br><span class="line"><span class="string">", 专业：'"</span> + major + <span class="string">'\''</span> +</span><br><span class="line"><span class="string">'&#125;'</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Vaild就是告诉SpringMVC 把数据绑定好后要根据Bean里面的校验规则校验</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/addStudent"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addStudent2</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@Valid @ModelAttribute Student student,</span></span></span><br><span class="line"><span class="function"><span class="params">Errors error,</span></span></span><br><span class="line"><span class="function"><span class="params">Model model)</span> </span>&#123;</span><br><span class="line">logger.info(student);</span><br><span class="line">model.addAttribute(<span class="string">"student"</span>, student);</span><br><span class="line"><span class="keyword">if</span> (error.hasErrors()) &#123;</span><br><span class="line">System.out.println(error);</span><br><span class="line">logger.error(error);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"add"</span>;        <span class="comment">//如果有错误，就返回填写页面重新填写</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;formName&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginForm</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@PathVariable String formName,</span></span></span><br><span class="line"><span class="function"><span class="params">Model model)</span></span>&#123;</span><br><span class="line">System.out.println(formName);</span><br><span class="line">Student student= <span class="keyword">new</span> Student();</span><br><span class="line">model.addAttribute(<span class="string">"student"</span>,student);</span><br><span class="line"><span class="comment">// 动态跳转页面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> formName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过在命令对象上注解@Valid 来告诉 Spring MVC 此命令对象在绑定完毕后需要进行 JSR-303验证，如果验证失败会将错误信息添加到 Errors 错误对象中。</p><ol start="5"><li>验证失败后回到填写表单的页面（/WEB-INF/jsp/pages/add.jsp）<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"form"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form:form modelAttribute=<span class="string">"student"</span> method=<span class="string">"post"</span> action=<span class="string">"addStudent.htm"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;姓名:&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;form:input path="name"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;form:errors path="name" cssStyle="color:red"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;学号:&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;form:input path="sid"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;form:errors path="sid" cssStyle="color:red"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;手机:&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;form:input path="phone"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;form:errors path="phone" cssStyle="color:red"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;班级:&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;form:input path="sclass"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;form:errors path="sclass" cssStyle="color:red"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;专业:&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;form:input path="major"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;form:errors path="major" cssStyle="color:red"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;&lt;input type="submit" value="提交"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><p><font size="4">测试结果：</font></p><center><a href="https://sm.ms/image/pEfGCSsAtqbuwi5" target="_blank"><img src="https://i.loli.net/2019/08/09/pEfGCSsAtqbuwi5.gif"></a></center><h5 id="自定义国际化错误消息提示"><a href="#自定义国际化错误消息提示" class="headerlink" title="自定义国际化错误消息提示"></a>自定义国际化错误消息提示</h5><p>在上面的程序中有一个不好的地方，错误消息不是 我们自定义的，而且都是英文的，下面我们来看看如何在通过国际化配置文件实现自定义国际化错误消息提示。<br>使用 <code>System.out.println(&quot;错误码：&quot;+fieldError.getCodes());</code>可以得到错误的错误码，每种错误都定义了4中错误码，如下：</p><center><a href="https://sm.ms/image/AOBwYaGI9RQids4" target="_blank"><img src="https://i.loli.net/2019/08/09/AOBwYaGI9RQids4.png"></a></center>他们从上到下所包含的范围由小到大，我们在写国际化配置文件的时候，每条配置的key必须是4个code中的一个code。<p><code>error_en_US.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NotBlank.student.name=name must not be empty</span><br><span class="line">Size.student.sid=the length must between &#123;2&#125; and &#123;1&#125;</span><br><span class="line">Pattern.student.phone=please write a right phone number</span><br><span class="line">NotBlank.student.sclass=class must not be empty</span><br><span class="line">NotEmpty.student.major=major must not be empty</span><br></pre></td></tr></table></figure><p><code>error_zh_CN.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NotBlank.student.name=姓名不能为空!</span><br><span class="line">Size.student.sid=长度应该在&#123;2&#125;和&#123;1&#125;之间!</span><br><span class="line">Pattern.student.phone=请填写正确的手机号码!</span><br><span class="line">NotBlank.student.sclass=班级不能为空!</span><br><span class="line">NotEmpty.student.major=专业不能为空!</span><br></pre></td></tr></table></figure><p>在springmvc.xml文件中配置国际化资源：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置国际化资源--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basenames"</span> <span class="attr">value</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;property name="basenames" value="message"/&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useCodeAsDefaultMessage"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheSeconds"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--配置字符编码为UTF-8：注意properties的编码格式也应该是UTF-8的，否者即使你设置了字符编码过滤器也会乱码--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 主要用于获取请求中的locale信息，将其转为Locale对像，获取LocaleResolver对象--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeChangeInterceptor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.LocaleChangeInterceptor"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置SessionLocaleResolver用于将Locale对象存储于Session中供后续使用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"SessionLocaleResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.SessionLocaleResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>测试结果：</p><center><a href="https://sm.ms/image/zrhlDwuCYSIEaRe" target="_blank"><img src="https://i.loli.net/2019/08/09/zrhlDwuCYSIEaRe.gif"></a></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数据绑定流程&quot;&gt;&lt;a href=&quot;#数据绑定流程&quot; class=&quot;headerlink&quot; title=&quot;数据绑定流程&quot;&gt;&lt;/a&gt;数据绑定流程&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Spring MVC将ServletRequest对象及目标方法的入参实例传给WebDataBi
      
    
    </summary>
    
      <category term="Spring框架" scheme="http://easyblog.top/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="http://easyblog.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC视图解析的一些其他知识点</title>
    <link href="http://easyblog.top/2019/08/08/SpringMVC%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://easyblog.top/2019/08/08/SpringMVC视图解析的一些其他知识点/</id>
    <published>2019-08-08T14:36:02.000Z</published>
    <updated>2019-08-13T14:34:07.206Z</updated>
    
    <content type="html"><![CDATA[<h3 id="视图解析的一些其他知识点"><a href="#视图解析的一些其他知识点" class="headerlink" title="视图解析的一些其他知识点"></a>视图解析的一些其他知识点</h3><h4 id="JstlView支持便捷的国际化功能"><a href="#JstlView支持便捷的国际化功能" class="headerlink" title="JstlView支持便捷的国际化功能"></a>JstlView支持便捷的国际化功能</h4><p>国际化的核心原理是：将资源文件配置给SpringMVC,让SpringMVC根据Loacl信息管理、调用资源文件。<br>国际化的核心配置：使用<strong><font size="4"><code>ResourceBundleMessageSource</code></font>,</strong><strong><font size="4">注意：这里的id后面的值一定要是messageSource</font></strong>，不这样写你试试看<del>~</del></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"WEB-INF/pages/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--指定使用JSTL视图解析器--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--   &lt;property name="viewNames" value="org.springframework.web.servlet.view.JstlView"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--springMVC管理国际化资源：把资源文件嫁给springMVC去管理--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 表示语言配置文件是以language开头的文件（language_zh_CN.properties）--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basenames"</span> <span class="attr">value</span>=<span class="string">"message"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 语言区域里没有找到对应的国际化文件时，默认使用language.properties文件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useCodeAsDefaultMessage"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheSeconds"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--配置字符编码为UTF-8：注意properties的编码格式也应该是UTF-8的，否者即使你设置了字符编码过滤器也会乱码--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配指资源文件：</p><center><a href="https://sm.ms/image/5oq9W4dIVhpGe1x" target="_blank"><img src="https://i.loli.net/2019/08/08/5oq9W4dIVhpGe1x.png" height="500px" width="450px"></a></center><p><code>message_en_US.properties</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">welcomeinfo=WELCOME VISIT</span><br><span class="line">username=USERNAME</span><br><span class="line">password=PASSWORD</span><br><span class="line">login=SIGN IN</span><br><span class="line">languge=Languge</span><br><span class="line">english=English</span><br><span class="line">chinese=Chinese</span><br></pre></td></tr></table></figure><p><code>message_zh_CN.properties</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">welcomeinfo=欢迎访问</span><br><span class="line">username=用户名</span><br><span class="line">password=密码</span><br><span class="line">login=登录</span><br><span class="line">languge=语言</span><br><span class="line">chinese=中文</span><br><span class="line">english=英语</span><br></pre></td></tr></table></figure><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.contorller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.net.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InternationalTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//跳转到登录页面</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/toLoginPage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查登录</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/checklogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">checkLogin</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"你好啊！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;fmt:message key="welcomeinfo" &gt;&lt;/fmt:message&gt;</span><br><span class="line">    &lt;form action=<span class="string">"checklogin"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;fmt:message key=<span class="string">"username"</span>/&gt;:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"请输入用户名。。。。"</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;fmt:message key=<span class="string">"password"</span>/&gt;:&lt;input type=<span class="string">"password"</span> name=<span class="string">"pwd"</span> placeholder=<span class="string">"请输入密码。。。。"</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;button type="submit"&gt;&lt;fmt:message key="login"/&gt;&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;label&gt;&lt;fmt:message key="languge"/&gt;:&lt;/label&gt;</span><br><span class="line">    &lt;a href="?locale=zh_CN"&gt;&lt;fmt:message key="chinese" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">    &lt;a href="?locale=en_US"&gt;&lt;fmt:message key="english" /&gt;&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">    当前语言: $&#123;pageContext.response.locale&#125;</span><br><span class="line"></span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><font size="4">测试结果：</font><br><a href="https://sm.ms/image/cohnJtLbQq2Wi6B" target="_blank"><img src="https://i.loli.net/2019/08/08/cohnJtLbQq2Wi6B.gif"></a></p><h4 id="页面和请求绑定"><a href="#页面和请求绑定" class="headerlink" title="页面和请求绑定"></a>页面和请求绑定</h4><p>在控制器中有时候我们仅仅是为了跳转到一个页面，但是我们却要给他单独写一个处理方法，这样很浪费，就比如上面跳转到登录页面的方法，解决方法就是使用<code>&lt;mvc:view-controller&gt;</code>这个标签：他有两个重要参数：<code>path:请求名/路径名</code>，<code>view-name:视图名（目标页面名）</code>。去掉上面login方法的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     &lt;mvc:view-controller&gt;是用来将一个路径和页面进行一种映射，</span></span><br><span class="line"><span class="comment">     path:请求名</span></span><br><span class="line"><span class="comment">      view-name:视图名（页面），参数的写法和在处理器方法中返回值的写法一样</span></span><br><span class="line"><span class="comment">     注意：使用这个标签会使@RequestMapping失效，解决方法是加上：</span></span><br><span class="line"><span class="comment">     &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt; 使得他们可以共存</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/toLoginPage"</span> <span class="attr">view-name</span>=<span class="string">"login"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义视图解析器和视图"><a href="#自定义视图解析器和视图" class="headerlink" title="自定义视图解析器和视图"></a>自定义视图解析器和视图</h4><h5 id="自定义视图解析器："><a href="#自定义视图解析器：" class="headerlink" title="自定义视图解析器："></a>自定义视图解析器：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义视图解析器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> order = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (viewName.startsWith(<span class="string">"my:"</span>)) &#123;</span><br><span class="line">            <span class="comment">//返回自定义的视图对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyView();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不能处理就不要强行处理了，返回null让别的视图处理器来处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.order = order;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义视图："><a href="#自定义视图：" class="headerlink" title="自定义视图："></a>自定义视图：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义视图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">implements</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回的文本类型：text/html</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"text/html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">     <span class="comment">// 渲染视图:在这个方法中写你对这个视图的渲染效果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; map, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"方法中保存的数据："</span> + map);</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        PrintWriter out = httpServletResponse.getWriter();</span><br><span class="line">        out.write(<span class="string">"&lt;h3&gt;精彩内容即将呈现...Loading&lt;/h3&gt;"</span>);</span><br><span class="line">        List&lt;Object&gt; lists= (List&lt;Object&gt;) map.get(<span class="string">"video"</span>);</span><br><span class="line">        out.write(<span class="string">"&lt;ul&gt;"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Object object:lists)&#123;</span><br><span class="line">            out.write(<span class="string">"&lt;li&gt;&lt;a href='download'&gt;"</span>+object+<span class="string">"&lt;/a&gt;&lt;/li&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">"&lt;/ul&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，现在视图处理和视图都定义好，这样我们的视图解析器就可以工作了吗？非也！虽然我们实现了ViewRelover接口.但是对于SpringMVC来说他就是一个普通的java类，，SpringMVC如何知道去哪里调用我们的视图解析器呢?解决的方法是：在springmvc配置文件中配置我们的视图解析器，交给SpringMVC管理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义的视图解析器:</span></span><br><span class="line"><span class="comment">       springmvc中视图解析器得到视图时优先级高的会先去尝试解析，order的数值越小，优先级越高</span></span><br><span class="line"><span class="comment">       自定义的视图解析器需要实现Orderd接口，默认的视图解析器InternalResourceViewResolver的优先级最低</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xzy.view.MyViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：自定义的视图解析器必须要实现ordered接口，以给我们自定义的视图解析器指定优先级，优先级的规则是值越小，优先级高；SpringMVC默认的视图解析器<code>InternalResourceViewResolver</code>的优先级是最低的。</p><h5 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.contorller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/viewhandler"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">myViewTest</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; vnames=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        vnames.add(<span class="string">"java疯狂讲义300集"</span>);</span><br><span class="line">        vnames.add(<span class="string">"java从入门到如入土！！！"</span>);</span><br><span class="line">        vnames.add(<span class="string">"Spring,SpringMVC从入门到放弃！！！"</span>);</span><br><span class="line">        vnames.add(<span class="string">"MySql从删库到跑路！！！"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"video"</span>,vnames);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my:/hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="4">测试结果：</font><br><a href="https://sm.ms/image/ko3CSMwgs1UAI6j" target="_blank"><img src="https://i.loli.net/2019/08/08/ko3CSMwgs1UAI6j.png"></a><br><strong><font size="5" color="red">总结自定义视图处理器和视图的步骤：</font></strong><br><strong></strong></p><ol><li><strong>编写视图处理器（实现ViewReslover接口的resolveViewName方法）和视图（实现View接口的两个方法：getContentType()、render()）</strong></li><li><strong>视图解析器必须放在IOC容器中</strong></li><li><strong>视图处理器除了要实现ViewReslover接口，还应该实现ordered接口，已给我们定义的视图解析器指定优先级，这个很关键.</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;视图解析的一些其他知识点&quot;&gt;&lt;a href=&quot;#视图解析的一些其他知识点&quot; class=&quot;headerlink&quot; title=&quot;视图解析的一些其他知识点&quot;&gt;&lt;/a&gt;视图解析的一些其他知识点&lt;/h3&gt;&lt;h4 id=&quot;JstlView支持便捷的国际化功能&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Spring框架" scheme="http://easyblog.top/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="http://easyblog.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC视图解析</title>
    <link href="http://easyblog.top/2019/08/07/SpringMVC%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90/"/>
    <id>http://easyblog.top/2019/08/07/SpringMVC视图解析/</id>
    <published>2019-08-07T06:41:44.000Z</published>
    <updated>2019-08-11T16:11:46.026Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringMVC视图解析"><a href="#SpringMVC视图解析" class="headerlink" title="SpringMVC视图解析"></a>SpringMVC视图解析</h3><p> &nbsp; &nbsp; &nbsp;对于控制器的目标方法，无论其返回值是String、View、ModelMap或是ModelAndView，SpringMVC都会在内部将它们封装为一个ModelAndView对象进行返回。<br>     &nbsp; &nbsp; &nbsp; Spring MVC 借助视图解析器（ViewResolver）得到最终的视图对象（View），最终的视图可以是JSP也可是Excell、 JFreeChart等各种表现形式的视图。</p><h4 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h4><blockquote><p> 视图的作用是渲染模型数据，将模型里的数据以某种形式呈现给客户。 为了实现视图模型和具体实现技术的解耦，Spring在org.springframework.web.servlet包中定义了一个高度抽象的View接口。<br>   视图对象由视图解析器负责实例化。由于视图是无状态的，所以他们不会有线程安全的问题。所谓视图是无状态的，是指对于每一个请求，都会创建一个View对象。<br>　JSP是最常见的视图技术。 </p></blockquote><center><a href="https://sm.ms/image/h1GdgDwFS4OeMLy" target="_blank"><img src="https://i.loli.net/2019/08/07/h1GdgDwFS4OeMLy.png"></a></center><h4 id="视图解析器（ViewResolver）和视图（View）"><a href="#视图解析器（ViewResolver）和视图（View）" class="headerlink" title="视图解析器（ViewResolver）和视图（View）"></a>视图解析器（ViewResolver）和视图（View）</h4><ul><li><strong>springMVC用于处理视图最重要的两个接口是<code>ViewResolver</code>和<code>View</code>。</strong><center><a href="https://sm.ms/image/ocemL4slE7KxngD" target="_blank"><img src="https://i.loli.net/2019/08/07/ocemL4slE7KxngD.png"></a></center></li></ul><p><font color="red"><strong>所以视图解析器的作用就是通过视图名（处理方法的返回值）生成View对象</strong></font>，所有的视图解析器都必须实现ViewResolver接口。<br>　　 SpringMVC为逻辑视图名的解析提供了不同的策略，可以在Spring WEB上下文中配置一种或多种解析策略，并指定他们之间的先后顺序。每一种映射策略对应一个具体的视图解析器实现类。程序员可以选择一种视图解析器或混用多种视图解析器。可以通过order属性指定解析器的优先顺序，order越小优先级越高，SpringMVC会按视图解析器顺序的优先顺序对逻辑视图名进行解析，直到解析成功并返回视图对象，否则抛出ServletException异常。<br>在项目中可以配置<code>InternalResourceViewResolver</code>作为视图解析器,在springmvc.xml中可以做如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span>  <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="forward-和redirect"><a href="#forward-和redirect" class="headerlink" title="forward: 和redirect:"></a>forward: 和redirect:</h4><p>一般情况下，控制器方法返回字符串类型的值会被当成逻辑视图名处理，会经过视图解析器拼串，但如果返回的字符串中带forward:或redirect:前缀时，SpringMVC会对它们进行特殊处理：将forward: 和redirect: 当成指示符，其后的字符串作为URL 来处理。示例如下：<br><code>index.html</code></p><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC给页面输出数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler1"</span>&gt;</span>handler1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler2"</span>&gt;</span>handler2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler3"</span>&gt;</span>handler3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler4"</span>&gt;</span>handler4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>hello.jsp</code>，在当前项目的根路径下，和index.html同级</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;h1&gt;这是hello.jsp&lt;/h1&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>ViewTestController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.Contorller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler1把请求转发到hello.jsp页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"handler1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/hello.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler把请求转发给handler1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handler2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:handler1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重定向到hello.jsp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">handler3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"handler3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/hello.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重定向到handler3</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler4"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handler4"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:handler3"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果:</p><p><a href="https://sm.ms/image/WS3iPsRax8ogvHu" target="_blank"><img src="https://i.loli.net/2019/08/07/WS3iPsRax8ogvHu.png" alt="QQ截图20190807154131.png"></a></p><p><a href="https://sm.ms/image/IDgLj7QWA5c1NwM" target="_blank"><img src="https://i.loli.net/2019/08/07/IDgLj7QWA5c1NwM.png" alt="QQ截图20190807154027.png"></a></p><p>按F12打开开发者工具，可以看到确实两次重定向<br><a href="https://sm.ms/image/TxW72zqBuSrUlt3" target="_blank"><img src="https://i.loli.net/2019/08/07/TxW72zqBuSrUlt3.png"></a></p><h4 id="SpringMVC视图的解析流程-结合源码分析"><a href="#SpringMVC视图的解析流程-结合源码分析" class="headerlink" title="SpringMVC视图的解析流程(结合源码分析)"></a>SpringMVC视图的解析流程(结合源码分析)</h4><ul><li>源码中把任何返回返回值封装为ModelAndView的实现：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.checkRequest(request);</span><br><span class="line">     ModelAndView mav;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">         HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">         <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">             Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">             <span class="keyword">synchronized</span>(mutex) &#123;</span><br><span class="line">               mav = <span class="keyword">this</span>.invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             mav = <span class="keyword">this</span>.invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         mav = <span class="keyword">this</span>.invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(!response.containsHeader(<span class="string">"Cache-Control"</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;        <span class="keyword">this</span>.applyCacheSeconds(response,<span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.prepareResponse(response);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> mav;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>这里以发出了一个GET请求为例：<br>首先<code>FrameworkServlet类</code>会来处理这个GET请求<br><code>doGet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processRequest(request, response);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>processRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//省略.....</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//它本类中的这个方法是个抽象方法，实现这个方法的类是DispatcherServlet</span></span><br><span class="line">            <span class="keyword">this</span>.doService(request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ServletException var16) &#123;</span><br><span class="line">            failureCause = var16;</span><br><span class="line">            <span class="keyword">throw</span> var16;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">           <span class="comment">//省略.....var17);</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//省略.....</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>DispatcherServlet 类</code><br><code>doService方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//省略.....</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//给request域中设置了一些东西</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用doDispatch方法处理</span></span><br><span class="line">        <span class="keyword">this</span>.doDispatch(request, response);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       ......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>doDispatch方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//省略......</span></span><br><span class="line">       <span class="keyword">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">        <span class="comment">//省略......</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>processDispatchResult方法</code>,这个方法就是最终将数据交给页面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response, @Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv, @Nullable Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//如果这里出现了异常就处理异常</span></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</span><br><span class="line"> mv = ((ModelAndViewDefiningException)exception).getModelAndView();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   Object handler = mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>;</span><br><span class="line">   <span class="comment">//如果自己配置了自定义的HandlerExceptionResolver将会在这个方法里处理</span></span><br><span class="line">   mv = <span class="keyword">this</span>.processHandlerException(request, response, handler, exception);</span><br><span class="line">             errorView = mv != <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">              <span class="comment">//调用render方法进行视图渲染</span></span><br><span class="line">             <span class="keyword">this</span>.render(mv, request, response);</span><br><span class="line">            <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">                WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.trace(<span class="string">"No view rendering, null ModelAndView returned."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//省略......</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>DispatcherServlet 类 的<code>render方法</code>并没有继承View接口的render,和View接口的render不是一回事，这个render仅仅是为了命名统一而起的一个名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//省略......</span></span><br><span class="line">   <span class="comment">//从ModelView中拿到视图名</span></span><br><span class="line">    String viewName = mv.getViewName();</span><br><span class="line">     View view;</span><br><span class="line">     <span class="keyword">if</span> (viewName != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//这一步就是得到一个View对象，resolveViewName的实现看下边</span></span><br><span class="line">          view = <span class="keyword">this</span>.resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class="line">  <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + mv.getViewName() + <span class="string">"' in servlet with name '"</span> + <span class="keyword">this</span>.getServletName() + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     view = mv.getView();</span><br><span class="line">     <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a View object in servlet with name '"</span> + <span class="keyword">this</span>.getServletName() + <span class="string">"'"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//省略......</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//省略......</span></span><br><span class="line">        <span class="comment">//调用了View接口的render方法，这里实际上调用的是视图在渲染时会把Model传入</span></span><br><span class="line">       view.render(mv.getModelInternal(), request, response);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">      <span class="comment">//省略......</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resolveViewName方法，循环遍历你配置的视图解析器，viewResolvers是进过order排序的，这一步就是ViewResolvers是如何通过视图名产生View对象的关键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">resolveViewName</span><span class="params">(String viewName,Map&lt;String, Object&gt; model, Locale locale, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//遍历我们配置的视图解析器</span></span><br><span class="line">    <span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</span><br><span class="line">       <span class="comment">//ViewResolver根据方法的返回值，得到一个View对象，这块又有一个resolveViewName，具体的实现请往下看</span></span><br><span class="line">       View view = viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">       <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> view;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InternalResourceViewResolver</code>继承了<code>AbstractCachingViewResolver</code>，resolveViewName方法首先会判断有没有缓存，要是有缓存，它会先去缓存中通过viewName查找是否有View对象的存在，要是没有，它会通过viewName创建一个新的View对象，并将View对象存入缓存中，这样再次遇到同样的视图名的时候就可以直接在缓存中取出View对象了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="comment">//判断有缓存中有没有view对象，有就直接拿来用</span></span><br><span class="line">     <span class="keyword">if</span> (!isCache()) &#123;</span><br><span class="line">         <span class="keyword">return</span> createView(viewName, locale);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(viewName, locale);</span><br><span class="line">        View view = <span class="keyword">this</span>.viewAccessCache.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span> (<span class="keyword">this</span>.viewCreationCache) &#123;</span><br><span class="line">              view = <span class="keyword">this</span>.viewCreationCache.get(cacheKey);</span><br><span class="line">              <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">//根据方法的返回值创建出View对象</span></span><br><span class="line">               view = createView(viewName, locale);</span><br><span class="line">               <span class="keyword">if</span> (view == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.cacheUnresolved) &#123;</span><br><span class="line">                    view = UNRESOLVED_VIEW;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.viewAccessCache.put(cacheKey, view);</span><br><span class="line">                    <span class="keyword">this</span>.viewCreationCache.put(cacheKey, view);</span><br><span class="line">                    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                    logger.trace(<span class="string">"Cached view ["</span> + cacheKey + <span class="string">"]"</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> (view != UNRESOLVED_VIEW ? view : <span class="keyword">null</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createView的实现细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">createView</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.canHandle(viewName, locale)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String forwardUrl;</span><br><span class="line">         <span class="comment">//如果方法得到返回值是以redirect：开始的</span></span><br><span class="line">        <span class="keyword">if</span> (viewName.startsWith(<span class="string">"redirect:"</span>)) &#123;</span><br><span class="line">           forwardUrl = viewName.substring(<span class="string">"redirect:"</span>.length());</span><br><span class="line">           RedirectView view = <span class="keyword">new</span> RedirectView(forwardUrl,             <span class="keyword">this</span>.isRedirectContextRelative(), <span class="keyword">this</span>.isRedirectHttp10Compatible());</span><br><span class="line">            String[] hosts = <span class="keyword">this</span>.getRedirectHosts();</span><br><span class="line">            <span class="keyword">if</span> (hosts != <span class="keyword">null</span>) &#123;</span><br><span class="line">               view.setHosts(hosts);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span>.applyLifecycleMethods(<span class="string">"redirect:"</span>, view);</span><br><span class="line">             <span class="comment">//如果方法的返回值是以forward:开始的</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (viewName.startsWith(<span class="string">"forward:"</span>)) &#123;</span><br><span class="line">            forwardUrl = viewName.substring(<span class="string">"forward:"</span>.length());</span><br><span class="line">            InternalResourceView view = <span class="keyword">new</span> InternalResourceView(forwardUrl);</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span>.applyLifecycleMethods(<span class="string">"forward:"</span>, view);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//其他情况的处理,这里又有一个createView，它调用了父类的createView创建了一个默认的View对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.createView(viewName, locale);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下都是解析视图名的实现细节，感兴趣的可以看一下。</p><p>父类<code>AbstractCachingViewResolver类</code>的createView实现细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">createView</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> loadView(viewName, locale);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InternalResourceViewResolver</code>继承了<code>UrlBasedViewResolver</code><br><code>UrlBasedViewResolver类</code>中loadView方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">loadView</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AbstractUrlBasedView view = buildView(viewName);</span><br><span class="line">        View result = applyLifecycleMethods(viewName, view);</span><br><span class="line">        <span class="keyword">return</span> (view.checkResource(locale) ? result : <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>UrlBasedViewResolver的buildView方法会获取一个View对象，这个对象会将视图以什么格式呈现给用户，例如如果是jsp显示呈现给用户的话，那这个view对象就是JstlView，默认的是JstlView。在这个方法中我们看到了getPrefix() + viewName + getSuffix()这样一段代码，这就是对视图路径的一个拼接了，getPrefix()方法获取前缀，也就是我们在配置文件中配置的<code>&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/PAGE/&quot;/&gt;</code>的value中的值了,getSuffix()方法就是获取后缀值了，也就是我们在配置文件中配置的<code>&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</code>的value中的值。这样就将将视图的物理路径找到了，并赋值到View的URL属性中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AbstractUrlBasedView <span class="title">buildView</span><span class="params">(String viewName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   Class&lt;?&gt; viewClass = <span class="keyword">this</span>.getViewClass();</span><br><span class="line">   Assert.state(viewClass != <span class="keyword">null</span>, <span class="string">"No view class"</span>);</span><br><span class="line">   AbstractUrlBasedView view = (AbstractUrlBasedView)BeanUtils.instantiateClass(viewClass);</span><br><span class="line">   view.setUrl(<span class="keyword">this</span>.getPrefix() + viewName + <span class="keyword">this</span>.getSuffix());</span><br><span class="line">   String contentType = <span class="keyword">this</span>.getContentType();</span><br><span class="line">   <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">      view.setContentType(contentType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    view.setRequestContextAttribute(<span class="keyword">this</span>.getRequestContextAttribute());</span><br><span class="line">    view.setAttributesMap(<span class="keyword">this</span>.getAttributesMap());</span><br><span class="line">    Boolean exposePathVariables = <span class="keyword">this</span>.getExposePathVariables();</span><br><span class="line">    <span class="keyword">if</span> (exposePathVariables != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.setExposePathVariables(exposePathVariables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   Boolean exposeContextBeansAsAttributes = <span class="keyword">this</span>.getExposeContextBeansAsAttributes();</span><br><span class="line">    <span class="keyword">if</span> (exposeContextBeansAsAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.setExposeContextBeansAsAttributes(exposeContextBeansAsAttributes);</span><br><span class="line">     &#125;</span><br><span class="line">    String[] exposedContextBeanNames = <span class="keyword">this</span>.getExposedContextBeanNames();</span><br><span class="line">    <span class="keyword">if</span> (exposedContextBeanNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.setExposedContextBeanNames(exposedContextBeanNames);</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样我们得到了一个View对象，这个视图的name就是逻辑视图名，因为当将View对象放在缓存的时候，我们可以通过逻辑视图名在缓存中找出View对象。我们在获取到View对象的时候，我们还要将View进行渲染，并呈现给用户。</p><p>View是个接口,AbstractView实现了render方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(@Nullable Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="keyword">this</span>.logger.debug(<span class="string">"View "</span> + <span class="keyword">this</span>.formatViewName() + <span class="string">", model "</span> + (model != <span class="keyword">null</span> ? model : Collections.emptyMap()) + (<span class="keyword">this</span>.staticAttributes.isEmpty() ? <span class="string">""</span> : <span class="string">", static attributes "</span> + <span class="keyword">this</span>.staticAttributes));</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">//主要是将一些属性填充到Map中</span></span><br><span class="line">   Map&lt;String, Object&gt; mergedModel = <span class="keyword">this</span>.createMergedOutputModel(model, request, response);</span><br><span class="line">    <span class="comment">//对response头进行了一些属性设置</span></span><br><span class="line">    <span class="keyword">this</span>.prepareResponse(request, response);</span><br><span class="line">    <span class="comment">//渲染给页面输出的所有model数据</span></span><br><span class="line">    <span class="keyword">this</span>.renderMergedOutputModel(mergedModel, <span class="keyword">this</span>.getRequestToExpose(request), response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一行的renderMergedOutputModel方法由AbstractView的孙子类InternalResourceView实现InternalResourceView的renderMergedOutputModel方法帮我们获取到视图的物理路径，然后将这段路径传给RequestDispatcher对象，再调用RequestDispatcher的forward方法将页面呈现给用户，这样就走完了视图的解析了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">     exposeModelAsRequestAttributes(model, request);</span><br><span class="line">    <span class="comment">// Expose helpers as request attributes, if any.</span></span><br><span class="line">    exposeHelpers(request);</span><br><span class="line">    <span class="comment">// Determine the path for the request dispatcher.</span></span><br><span class="line">    String dispatcherPath = prepareForRendering(request, response);</span><br><span class="line">    <span class="comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span></span><br><span class="line">    RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);</span><br><span class="line">    <span class="keyword">if</span> (rd == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not get RequestDispatcher for ["</span> + getUrl() + <span class="string">"]: Check that the corresponding file exists within your web application archive!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If already included or response already committed, perform include, else forward.</span></span><br><span class="line">        <span class="keyword">if</span> (useInclude(request, response)) &#123;</span><br><span class="line">            response.setContentType(getContentType());</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">             logger.debug(<span class="string">"Including resource ["</span> + getUrl() + <span class="string">"] in InternalResourceView '"</span> + getBeanName() + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            rd.include(request, response);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Note: The forwarded resource is supposed to determine the content type itself.</span></span><br><span class="line">          <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Forwarding to resource ["</span> + getUrl() + <span class="string">"] in InternalResourceView '"</span> + getBeanName() + <span class="string">"'"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">             <span class="comment">//对请求进行转发，至此结束了视图解析解析过程</span></span><br><span class="line">           rd.forward(request, response);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后一句话总结：<br><font color="red">视图解析器只是为了得到视图对象；视图对象才是真正的转发（将模型数据发在request域中数据）或重定向到页面（视图对象才是真正的渲染视图）。</font></strong></p><center><a href="https://sm.ms/image/uheCvrxoblOK73t" target="_blank"><img src="https://i.loli.net/2019/08/07/uheCvrxoblOK73t.png"></a></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringMVC视图解析&quot;&gt;&lt;a href=&quot;#SpringMVC视图解析&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC视图解析&quot;&gt;&lt;/a&gt;SpringMVC视图解析&lt;/h3&gt;&lt;p&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;对于控制器
      
    
    </summary>
    
      <category term="Spring框架" scheme="http://easyblog.top/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="http://easyblog.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC处理模型参数</title>
    <link href="http://easyblog.top/2019/08/07/SpringMVC-%E5%A4%84%E7%90%86%E6%A8%A1%E5%9E%8B%E5%8F%82%E6%95%B0/"/>
    <id>http://easyblog.top/2019/08/07/SpringMVC-处理模型参数/</id>
    <published>2019-08-07T06:14:42.000Z</published>
    <updated>2019-08-11T15:51:40.494Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SpringMVC-提供了以下几种途径输出模型数据"><a href="#SpringMVC-提供了以下几种途径输出模型数据" class="headerlink" title="SpringMVC 提供了以下几种途径输出模型数据:"></a>SpringMVC 提供了以下几种途径输出模型数据:</h4><ul><li><strong><font color="red" size="4">ModelAndView</font></strong>: 处理方法返回值类型为 ModelAndView时, 方法体即可通过该对象添加模型数据</li><li><strong><font color="red" size="4">Map、Model以及ModelMap</font></strong>:入参为org.springframework.ui.Model、org.springframework.ui.ModelMap 或 Java.uti.Map 时，处理方法返回时，Map中的数据会自动添加到模型中。</li><li><strong><font color="red" size="4">@SessionAttributes</font></strong>: 将模型中的某个属性暂存到HttpSession 中，以便多个请求之间可以共享这个属性</li><li><strong><font color="red" size="4"> @ModelAttribute</font></strong>: 方法入参标注该注解后, 入参的对象就会放到数据模型中。</li><li>当然，除了上面这些SpringMVC提供的几种方法，SpringMVC支持直接使用Servlet几个原生API来给页面传值: <code>HttpServletRequest request</code>、<code>HttpservletResponse response</code>、<code>HttpSession session</code>、<code>InputStream/Reader 对应request.getInputStream()</code>、<code>OutputStream/Writer 对应response.getOutputStram()</code><hr></li></ul><h4 id="servlet原生API给页面传值"><a href="#servlet原生API给页面传值" class="headerlink" title="servlet原生API给页面传值"></a><font color="green">servlet原生API给页面传值</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用servlet原生API给页面输出数据</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"handler01"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">handler01</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                         HttpSession session)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">     request.setAttribute(<span class="string">"msg"</span>,<span class="string">"你好，这是HelloController"</span>);</span><br><span class="line">     session.setAttribute(<span class="string">"msg"</span>,<span class="string">"json123"</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>页面测试代码:<code>success.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;table border=<span class="string">"1px"</span> width=<span class="string">"70%"</span> &gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;域&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;值&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;requestScope&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;$&#123;requestScope.msg&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;sessionScope&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;$&#123;sessionScope.msg&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;applicationScope&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;$&#123;applicationScope.msg&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;pageScope&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;$&#123;pageScope.msg&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>测试结果：<br><a href="https://sm.ms/image/eXMQwoIg9RShkpB" target="_blank"><img src="https://i.loli.net/2019/08/07/eXMQwoIg9RShkpB.png"></a></p><h4 id="Model、Map、ModelMap"><a href="#Model、Map、ModelMap" class="headerlink" title="Model、Map、ModelMap"></a><font color="green">Model、Map、ModelMap</font></h4><p>首先通过通过源码看看他们三者的关系：<br><code>ModelMap类</code><br><a href="https://sm.ms/image/uYWZTjhPgtSNFGd" target="_blank"><img src="https://i.loli.net/2019/08/07/uYWZTjhPgtSNFGd.png"></a></p><p><code>Model接口</code><br><a href="https://sm.ms/image/y4p71xTtdgYvLhE" target="_blank"><img src="https://i.loli.net/2019/08/07/y4p71xTtdgYvLhE.png"></a></p><p><code>ExtendModelMap类</code><br><a href="https://sm.ms/image/2m6PHJQB1YnsNxr" target="_blank"><img src="https://i.loli.net/2019/08/07/2m6PHJQB1YnsNxr.png"></a></p><p><code>BindingAwareModelMap类</code><br><a href="https://sm.ms/image/xNhiS56XRomwGry" target="_blank"><img src="https://i.loli.net/2019/08/07/xNhiS56XRomwGry.png"></a></p><p>通过打开源码，我们不难总结出如下继承关系 ：<br><a href="https://sm.ms/image/MhHJA6cxYNk1nsG" target="_blank"><img src="https://i.loli.net/2019/08/07/MhHJA6cxYNk1nsG.png"></a></p><p><font size="4">接下来看看他们的用法：</font><br><font size="3">示例代码</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler02"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler02</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Model"</span>+model.getClass());</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"大家好！这是handler02"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"id"</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler03"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler03</span><span class="params">(Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Map:"</span>+map.getClass());</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"handler03"</span>);</span><br><span class="line">        map.put(<span class="string">"logged"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用ModelMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler04"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler04</span><span class="params">(ModelMap modelMap)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ModelMap:"</span>+modelMap.getClass());</span><br><span class="line">        modelMap.addAttribute(<span class="string">"msg"</span>,<span class="string">"handler04"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>页面代码和上面样</p><p>测试结果：<br>页面的显示：<br><a href="https://sm.ms/image/WvtYzBmaxk7LfMK" target="_blank"><img src="https://i.loli.net/2019/08/07/WvtYzBmaxk7LfMK.png"></a></p><p><a href="https://sm.ms/image/YpJWiH5dQwhSykj" target="_blank"><img src="https://i.loli.net/2019/08/07/YpJWiH5dQwhSykj.png"></a></p><p><a href="https://sm.ms/image/vIikTXWz3tnCubS" target="_blank"><img src="https://i.loli.net/2019/08/07/vIikTXWz3tnCubS.png"></a></p><p>控制台打印的信息:<br><a href="https://sm.ms/image/TvnF316kMtj2lw7" target="_blank"><img src="https://i.loli.net/2019/08/07/TvnF316kMtj2lw7.png"></a></p><blockquote><p> <strong>从测试结果可以总结出：<br>Model(SpringMVC接口)其中一个实现类是ExtendedModelMap<br>ModelMap是Map(JDK的接口)Map的一个实现类,并且ModelMap被ExtendedModelMap<br>ExtendedModelMap被BindingAwareModelMap继承<br>Model、Map、ModelMap不论用哪个，最终工作的都是BindingAwareModelMap,而且从测试结果可以看到通过这三个设置的值，SpringMVC都把他们放在了request域中。</strong></p></blockquote><h4 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a><font color="green">ModelAndView</font></h4><blockquote><p>目标方法的返回值可以是ModelAndView类型，从名字上就可以看到，这是一个既包括模型(Model)又有视图(View)的一个类， 然而事实也确实如此，他的model就可以理解为送给页面的数据，他的View可以理解为目标页面地址。但我们在他的model中放入值后，SpringMVC会把ModelAndView的model中数据放在request域对象中。</p></blockquote><p><font size="3">示例代码</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法的返回值可以是 ModelAndView类型，这样我们可以把值设置在model中</span></span><br><span class="line"><span class="comment"> * 然后springmvc会把ModelAndView的model中数据放在request域对象中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handler05"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handler05</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ModelAndView mv=<span class="keyword">new</span> ModelAndView(<span class="string">"success"</span>);</span><br><span class="line">    mv.addObject(<span class="string">"msg"</span>,<span class="string">"handler05"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><a href="https://sm.ms/image/qjsTKIJvu4V7Qa6" target="_blank"><img src="https://i.loli.net/2019/08/07/qjsTKIJvu4V7Qa6.png"></a></p><h4 id="使用-SessionAttributes注解"><a href="#使用-SessionAttributes注解" class="headerlink" title="使用@SessionAttributes注解"></a><font color="green">使用@SessionAttributes注解</font></h4><p>如果希望在多个请求之间共用某个模型属性数据，则可以在控制器类标注一个 @SessionAttributes，SpringMVC 会将模型中对应的属性暂存到 HTTPSession 中。<br>@SessionAttributes 除了可以通过属性名指定需要放到会话中的属性外，还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中。</p><ol><li>@SessionAttributes(types=User.class)会将隐含模型中所有类型为 User 的属性添加到会话中</li><li>@SessionAttributes(value={“user1”, “user2”})将名为 user1 和 user2 的模型属性添加到会话中</li><li>@SessionAttributes(types={“User.class”, “Dept.class”})将模型中所有类型为 User 及 Dept 的属性添加到会话中</li><li>@SessionAtributes(value={“user1”, “user2”}, types={Dept.class})将名为 user1 和 user2 的模型属性添加到会话中，同时将所有类型为 Dept 的模型属性添加到会话中<br><strong>总之：<br>当使用@SessionAttributes注解时就是告诉SpringMVC,当@SessionAttributes中的value值和BindingAwareModelMap的key一样时，那么在session也你也给我保存一份相同的值</strong><br><font size="4">示例代码：</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用的时候一定要注意@SessionAttributes只能用在类上</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(value=&#123;<span class="string">"id"</span>,<span class="string">"logged"</span>&#125;)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/handler0"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sessionAttributesTest</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"handler0"</span>);   <span class="comment">//这个会在request中显示</span></span><br><span class="line">        model.addAttribute(<span class="string">"logged"</span>,<span class="keyword">new</span> Date());   <span class="comment">//会在session中显示</span></span><br><span class="line">        model.addAttribute(<span class="string">"id"</span>,<span class="string">"001"</span>);         <span class="comment">//会在session中显示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>页面代码对success.jsp中的sessionScope稍作修改：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;tr&gt;</span><br><span class="line">     &lt;th&gt;sessionScope&lt;/th&gt;</span><br><span class="line">     &lt;td&gt;$&#123;sessionScope.msg&#125; | $&#123;sessionScope.id&#125; |$&#123;sessionScope.logged&#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><p>测试结果：<br><a href="https://sm.ms/image/rpLn2aQ73EdJcPS" target="_blank"><img src="https://i.loli.net/2019/08/07/rpLn2aQ73EdJcPS.png"></a></p><h4 id="使用-ModelAttribute注解"><a href="#使用-ModelAttribute注解" class="headerlink" title="使用@ModelAttribute注解"></a>使用@ModelAttribute注解</h4><p>先来看看ModelAttribute的定义：<br><a href="https://sm.ms/image/LZCvYSrNxUJts8m" target="_blank"><img src="https://i.loli.net/2019/08/07/LZCvYSrNxUJts8m.png"></a><br>查看 @ModelAttribute注解定义可以看到这个注解可以用在方法和参数中。 在 SpringMVC 的 Controller 中使用 @ModelAttribute 时，应用情况包括下面几种：<br>1、应用在方法上。<br>2、应用在方法的参数上。<br>3、应用在方法上，并且方法也使用了@RequestMapping</p><p><font size="4">示例代码：</font><br>修改图书信息的页面：</p><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC给页面输出数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--    &lt;a href="handler01"&gt;原生API输出数据&lt;/a&gt;&lt;br/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler02"</span>&gt;</span>Model输出数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler03"</span>&gt;</span>Map输出数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler04"</span>&gt;</span>ModelMap输出数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"handler05"</span>&gt;</span>ModelAndView带回返回值<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>--&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>更新图书信息<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"update"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        书名：<span class="tag">&lt;<span class="name">label</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        作者：<span class="tag">&lt;<span class="name">label</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">placeholder</span>=<span class="string">"输入价格..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        库存：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"stock"</span> <span class="attr">placeholder</span>=<span class="string">"输入库存..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        销量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"sales"</span> <span class="attr">placeholder</span>=<span class="string">"输入销量..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>提交图书修改信息后的页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2019</span>/<span class="number">8</span>/<span class="number">7</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">34</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;更新图书&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;div style=<span class="string">"height: 200px;width: 100%"</span>&gt;</span><br><span class="line">        &lt;h3&gt;提交的书籍的信息：&lt;/h3&gt;</span><br><span class="line">        &lt;table border=<span class="string">"1px"</span> width=<span class="string">"50%"</span>&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;书名&lt;/th&gt;&lt;td&gt;$&#123;book.name&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;作者&lt;/th&gt;&lt;td&gt;$&#123;book.author&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;价格&lt;/th&gt;&lt;td&gt;$&#123;book.price&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;库存&lt;/th&gt;&lt;td&gt;$&#123;book.stock&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;销量&lt;/th&gt;&lt;td&gt;$&#123;book.sales&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果没有使用@ModelAttribute，那么要更新数据信息，必须要全字段更新，即使你不需要更新的的字段，你也要填写，这显然不和常理，因为如果你不填写这个值，值就会为null。最主要是因为SpringMVC在封装提交的信息的时候只会new一个Book对象，里面的属性的值初始就是null。你没有填写也只会以null存到数据库。<br><strong>不使用@ModelAttribute进行非全字段更新</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Book book)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新图书的信息......页面提交过来的图书信息："</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"updateBook"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>测试结果:<br>页面的显示：<br><a href="https://sm.ms/image/VEDqmp1C9kXRhM5" target="_blank"><img src="https://i.loli.net/2019/08/07/VEDqmp1C9kXRhM5.png"></a></p><p><a href="https://sm.ms/image/FmjsoYHJQc7DCBA" target="_blank"><img src="https://i.loli.net/2019/08/07/FmjsoYHJQc7DCBA.png"></a></p><p>看看控制台的打印信息：<br><a href="https://sm.ms/image/PCKZOAcpzXdSfrT" target="_blank"><img src="https://i.loli.net/2019/08/07/PCKZOAcpzXdSfrT.png"></a></p><p>可以看到果然不出预料的出问题了，更新信息后书名和作者的信息没了。这就相当于你更改了一下你的QQ密码，然后你的QQ号没了！这是很可怕的事情。<br>使用@ModelAttribute解决问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.Contorller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.Address;</span><br><span class="line"><span class="keyword">import</span> bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用在方法上：这个方法就会优先于该类中的左右处理器方法先执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBook</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//模拟从数据库中查询图书数据</span></span><br><span class="line">        Book book=<span class="keyword">new</span> Book();</span><br><span class="line">        book.setName(<span class="string">"西游记"</span>);</span><br><span class="line">        book.setPrice(<span class="number">9.98</span>);</span><br><span class="line">        book.setAuthor(<span class="string">"吴承恩"</span>);</span><br><span class="line">        book.setSales(<span class="number">300</span>);</span><br><span class="line">        book.setStock(<span class="number">400</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据库中查询到Book的信息："</span>+book);</span><br><span class="line">        map.put(<span class="string">"book"</span>,book);</span><br><span class="line">        System.out.println(<span class="string">"ModelAttribute将查询到的图书信息保存起来.......："</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以告诉SpringMVC,你不要去new Book对象了，我已经从数据库中查询到了，你直接拿过去用就好了。</span></span><br><span class="line"><span class="comment">     * 问题是：如何告诉SpringMVC来用这个已经处理好的Book对象呢？</span></span><br><span class="line"><span class="comment">     * 这就是<span class="doctag">@ModelAttribute</span>在参数位置的用法：</span></span><br><span class="line"><span class="comment">     * 下面的<span class="doctag">@ModelAttribute</span>("book")，就是告诉SpringMVC，去拿一个key为</span></span><br><span class="line"><span class="comment">     * book的值，你不要重新new一个Book对象了，这样做的好处是可以只更改有更新的数据，没有更新的就保持原始值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@ModelAttribute(<span class="string">"book"</span>)</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新图书的信息......页面提交过来的图书信息："</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"updateBook"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br>页面展示的结果：</p><p><a href="https://sm.ms/image/oHbxw4j9AdvWeis" target="_blank"><img src="https://i.loli.net/2019/08/07/oHbxw4j9AdvWeis.png"></a></p><p>控制台打印的信息：<br><a href="https://sm.ms/image/TODtoyBfzX9N4si" target="_blank"><img src="https://i.loli.net/2019/08/07/TODtoyBfzX9N4si.png"></a></p><p>而且从控制台打印的信息来看，被@ModelAttribute标识的方法确实是在处理器方法之前执行了</p><h5 id="Modelattribute的原理"><a href="#Modelattribute的原理" class="headerlink" title="@Modelattribute的原理"></a>@Modelattribute的原理</h5><p>废话不多说，直接看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.Contorller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.Address;</span><br><span class="line"><span class="keyword">import</span> bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: HuangXin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 10:33 2019/8/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj1;</span><br><span class="line">    <span class="keyword">private</span> Object b1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以告诉SpringMVC,你不要去new Book对象了，我已经从数据库中查询到了，你直接拿过去用就好了。</span></span><br><span class="line"><span class="comment">     * 问题是：如何告诉SpringMVC来用这个已经处理好的Book对象呢？</span></span><br><span class="line"><span class="comment">     * 这就是<span class="doctag">@ModelAttribute</span>在参数位置的用法：</span></span><br><span class="line"><span class="comment">     * 下面的<span class="doctag">@ModelAttribute</span>("book")，就是告诉SpringMVC，你去拿一个key为book的值，</span></span><br><span class="line"><span class="comment">     * 你不要重新new一个Book对象了</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@ModelAttribute(<span class="string">"book"</span>)</span> Book book, Map&lt;String,Object&gt; model)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理器方法的map:"</span>+model.getClass());</span><br><span class="line">        System.out.println(<span class="string">"book==b1=&gt;"</span>+(book==b1));</span><br><span class="line">        System.out.println(<span class="string">"obj1==model=&gt;"</span>+(obj1==model));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"更新图书的信息......页面提交过来的图书信息："</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"updateBook"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用在方法上：这个方法就会优先于该类中的左右处理器方法先执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBook</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//模拟从数据库中拿数据</span></span><br><span class="line">        Book book=<span class="keyword">new</span> Book();</span><br><span class="line">        book.setName(<span class="string">"西游记"</span>);</span><br><span class="line">        book.setPrice(<span class="number">9.98</span>);</span><br><span class="line">        book.setAuthor(<span class="string">"吴承恩"</span>);</span><br><span class="line">        book.setSales(<span class="number">300</span>);</span><br><span class="line">        book.setStock(<span class="number">400</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据库中查询到Book的信息："</span>+book);</span><br><span class="line"></span><br><span class="line">        obj1=map;</span><br><span class="line">        b1=book;</span><br><span class="line">        map.put(<span class="string">"book"</span>,book);</span><br><span class="line">        System.out.println(<span class="string">"@ModelAttribute中的map:"</span>+map.getClass());</span><br><span class="line">        System.out.println(<span class="string">"ModelAttribute将查询到的图书信息保存起来.......："</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><a href="https://sm.ms/image/26Zl3AnfXPmDoNg" target="_blank"><img src="https://i.loli.net/2019/08/07/26Zl3AnfXPmDoNg.png"></a></p><p>最后总结为一张图：<br><a href="https://sm.ms/image/2TzY8fFvo6yJmdO" target="_blank"><img src="https://i.loli.net/2019/08/07/2TzY8fFvo6yJmdO.png"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;SpringMVC-提供了以下几种途径输出模型数据&quot;&gt;&lt;a href=&quot;#SpringMVC-提供了以下几种途径输出模型数据&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC 提供了以下几种途径输出模型数据:&quot;&gt;&lt;/a&gt;SpringMVC 
      
    
    </summary>
    
      <category term="Spring框架" scheme="http://easyblog.top/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="http://easyblog.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC获取请求参数</title>
    <link href="http://easyblog.top/2019/08/06/Springmvc/"/>
    <id>http://easyblog.top/2019/08/06/Springmvc/</id>
    <published>2019-08-06T11:24:59.000Z</published>
    <updated>2019-08-11T16:11:46.079Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一种方式：方法的形参上给一个和请求参数同名的参数"><a href="#第一种方式：方法的形参上给一个和请求参数同名的参数" class="headerlink" title="第一种方式：方法的形参上给一个和请求参数同名的参数"></a>第一种方式：方法的形参上给一个和请求参数同名的参数</h4><h5 id="1-获得普通类型的参数值"><a href="#1-获得普通类型的参数值" class="headerlink" title="1.获得普通类型的参数值"></a>1.获得普通类型的参数值</h5><p><font size="4">示例代码</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第1种获得请求参数的方式：在方法的形参上给一个和请求参数同名的参数，</span></span><br><span class="line"><span class="comment"> *  之后SpringMVC会帮我们自动注入参数值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/welcome"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">welcome</span><span class="params">(String username, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"用户名："</span>+username);</span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>,username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-获得POJO类型的值"><a href="#2-获得POJO类型的值" class="headerlink" title="2.获得POJO类型的值"></a>2.获得POJO类型的值</h5><p><font size="4">示例代码：</font><br>新建Book.java以及Address.java两个POJO<br><code>Book.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> Integer stock;   <span class="comment">//库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer sales;   <span class="comment">//销量</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Address address;  <span class="comment">//地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略getter、setter方法，并且重写toString()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Address.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String county;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略getter、setter方法，并且重写toString()方法</span></span><br></pre></td></tr></table></figure><p>写一个简单的表单：<br><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMvc获取参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>录入书籍信息<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"book"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        书名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"输入书名..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        作者：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">placeholder</span>=<span class="string">"输入作者..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">placeholder</span>=<span class="string">"输入价格..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        库存：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"stock"</span> <span class="attr">placeholder</span>=<span class="string">"输入库存..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        销量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"sales"</span> <span class="attr">placeholder</span>=<span class="string">"输入销量..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address.province"</span> /&gt;</span>省&amp;nbsp;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address.city"</span> /&gt;</span>市&amp;nbsp;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address.county"</span> /&gt;</span>(区/县)&amp;nbsp;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交后的页面：<br><code>book.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span></span><br><span class="line">    <span class="keyword">import</span>=<span class="string">"com.xzy.bean.*"</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;SpringMVC获取参数&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;div style=<span class="string">"height: 200px;width: 100%"</span>&gt;</span><br><span class="line">        &lt;h3&gt;提交的书籍的信息：&lt;/h3&gt;</span><br><span class="line">        &lt;table border=<span class="string">"1px"</span> width=<span class="string">"50%"</span>&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;书名&lt;/th&gt;&lt;td&gt;$&#123;book.name&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;作者&lt;/th&gt;&lt;td&gt;$&#123;book.author&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;价格&lt;/th&gt;&lt;td&gt;$&#123;book.price&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;库存&lt;/th&gt;&lt;td&gt;$&#123;book.stock&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;销量&lt;/th&gt;&lt;td&gt;$&#123;book.sales&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;地区&lt;/th&gt;&lt;td&gt;$&#123;book.address&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>提供一个控制器：<br><code>BookContorller.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xzy.bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookContorller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SprningMVC帮我们自动注入参数到POJO类型中，而且还可以级联注入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addbook</span><span class="params">(Book book, HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印得到的book信息</span></span><br><span class="line">        System.out.println(book);</span><br><span class="line">        request.setAttribute(<span class="string">"book"</span>,book);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"book"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://i.loli.net/2019/08/06/faohYdzNDuIHK8X.png" alt="QQ截图20190804124754.png"><br><img src="https://i.loli.net/2019/08/06/WJq562cSw3K4Ven.png" alt="20190804124807.png"></p><h4 id="第二种方式：使用Spring提供的注解"><a href="#第二种方式：使用Spring提供的注解" class="headerlink" title="第二种方式：使用Spring提供的注解"></a>第二种方式：使用Spring提供的注解</h4><h5 id="1-使用-RequestParam-获取参数"><a href="#1-使用-RequestParam-获取参数" class="headerlink" title="1. 使用@RequestParam 获取参数"></a>1. 使用@RequestParam 获取参数</h5><p>分析<code>@RequestParam</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestParam &#123;</span><br><span class="line">    <span class="comment">//默认值就是它，表示请求参数的key</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"name"</span>)</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//请求参数的值</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">    </span><br><span class="line">   <span class="comment">//设置这个参数是否必须，required=false表示这个参数不是必须的</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//参数的默认值</span></span><br><span class="line">    <span class="function">String <span class="title">defaultValue</span><span class="params">()</span> <span class="keyword">default</span> "\n\t\t\n\t\t\n\ue000\ue001\ue002\n\t\t\t\t\n"</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="4">示例代码：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RequestParam设置获取参数的key为user,required=false表示这个参数不是必须的，</span></span><br><span class="line"><span class="comment"> * defaultValue是这个参数的默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestParam</span>(value = "user", required = false, defaultValue = "") String username；</span></span><br><span class="line"><span class="comment"> * 等价于以前写的：</span></span><br><span class="line"><span class="comment"> * String user=null!=request.getParameter("user")?request.getParameter("user"):"";</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/welcome3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">welocme3</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(value = <span class="string">"user"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">""</span>)</span> String username, Model model) </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-使用-RequestHeader获得请求的头部信息"><a href="#2-使用-RequestHeader获得请求的头部信息" class="headerlink" title="2.使用@RequestHeader获得请求的头部信息"></a>2.使用@RequestHeader获得请求的头部信息</h5><p><code>@RequestHeader</code>和<code>@ReuqestParma</code>的实现方式如出一辙，使用方法也基本相同。<br><font size="4">示例代码1：</font>使用RequestHeader注解获得浏览器的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  <span class="doctag">@RequestHeader</span>(value = "User-Agent",required = false,defaultValue = "") String userAgent</span></span><br><span class="line"><span class="comment">    *  获取请求头中的值，相当于以前写的：</span></span><br><span class="line"><span class="comment">    *  String header=null!=request.getHeader("User-Agent")?      request.getHeader("User-Agent"):"";</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userAgent</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/welcome4"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">welocme4</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           @RequestParam(value = <span class="string">"user"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">""</span>)</span> String username,</span></span><br><span class="line"><span class="function">           @<span class="title">RequestHeader</span><span class="params">(value = <span class="string">"User-Agent"</span>,defaultValue = <span class="string">""</span>)</span> String userAgent,</span></span><br><span class="line"><span class="function">           Model model) </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line">       System.out.println(<span class="string">"User-Agent"</span>+userAgent);</span><br><span class="line">       model.addAttribute(<span class="string">"userAgent"</span>,userAgent);</span><br><span class="line">       model.addAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><font size="4">示例代码2：</font>使用RequestHeader注解获取请求头部的Cookie信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用RequestHeader获得请求头中的Cookie的全部信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cookie</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/welcome5"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">welocome5</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           @RequestParam(value = <span class="string">"user"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">""</span>)</span> String username,</span></span><br><span class="line"><span class="function">           @<span class="title">RequestHeader</span><span class="params">(value = <span class="string">"Cookie"</span>,required = <span class="keyword">false</span>,defaultValue = <span class="string">""</span>)</span> String cookie,</span></span><br><span class="line"><span class="function">            Model model)</span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line">       model.addAttribute(<span class="string">"cookie"</span>,cookie);</span><br><span class="line">       model.addAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="3-使用CookieValue获得请求头部的JSESSIONID"><a href="#3-使用CookieValue获得请求头部的JSESSIONID" class="headerlink" title="3.使用CookieValue获得请求头部的JSESSIONID"></a>3.使用CookieValue获得请求头部的JSESSIONID</h5><p><font size="4">示例代码：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用SpringMVC提供的<span class="doctag">@CookieValue</span>注解，可以只获的JSESSIONID的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookie</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/welcome6"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">welocome6</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"user"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">""</span>)</span> String username,</span></span><br><span class="line"><span class="function">            @<span class="title">CookieValue</span><span class="params">(value = <span class="string">"JSESSIONID"</span> ,required = <span class="keyword">false</span>,defaultValue = <span class="string">""</span>)</span> String cookie,</span></span><br><span class="line"><span class="function">            Model model)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line">        model.addAttribute(<span class="string">"cookie"</span>,cookie);</span><br><span class="line">        model.addAttribute(<span class="string">"username"</span>, username);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"cookie："</span>+cookie);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第一种方式：方法的形参上给一个和请求参数同名的参数&quot;&gt;&lt;a href=&quot;#第一种方式：方法的形参上给一个和请求参数同名的参数&quot; class=&quot;headerlink&quot; title=&quot;第一种方式：方法的形参上给一个和请求参数同名的参数&quot;&gt;&lt;/a&gt;第一种方式：方法的形参
      
    
    </summary>
    
      <category term="Spring框架" scheme="http://easyblog.top/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="http://easyblog.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC</title>
    <link href="http://easyblog.top/2019/08/05/SpringMVC%E5%85%A5%E9%97%A8/"/>
    <id>http://easyblog.top/2019/08/05/SpringMVC入门/</id>
    <published>2019-08-05T15:24:58.000Z</published>
    <updated>2019-08-13T16:11:39.500Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Spring-MVC体系结构："><a href="#Spring-MVC体系结构：" class="headerlink" title="Spring MVC体系结构："></a>Spring MVC体系结构：</h4><p>SpringMVC 是基于 Model2 实现的技术框架</p><ul><h5>  <strong><font size="4">一个请求在SpringMVC中经历的过程：</font></strong></h5> <li>请求旅程的第一站是 Spring 的<strong> DispatcherServlet</strong>。与大多数基于 Java 的 Web 框架一样，Spring MVC 所有的请求都会通过一个<strong>前端控制器（front controller）</strong>Servlet。前端控制器是常用的 Web 应用程序模式，在这里一个单实例的 Servlet 将请求委托给应用程序的其他组件来执行实际的处理。在 Spring MVC 中，DispatcherServlet 就是前端控制器。</li><li> DispatcherServlet 的任务是将请求发送给<strong> Spring MVC 控制器（controller）</strong>。控制器是一个用于处理请求的 Spring 组件。在典型的应用程序中可能会有多个控制器，DispatcherServlet 需要知道应该将请求发送给哪个控制器。所以 DispatcherServlet 以会查询一个或多个<strong>处理器映射（handler mapping）</strong> 来确定请求的下一站在哪里。处理器映射会根据请求所携带的 URL 信息来进行决策。</li><li> 一旦选择了合适的控制器，DispatcherServlet 会将请求发送给选中的控制器 。到了控制器，请求会卸下其负载（用户提交的信息）并耐心等待控制器处理这些信息。（实际上，设计良好的控制器本身只处理很少甚至不处理工作，而是将业务逻辑委托给一个或多个服务对象进行处理。）</li><li> 控制器在完成逻辑处理后，通常会产生一些信息，这些信息需要返回给用户并在浏览器上显示。这些信息被称为<strong>模型（model）</strong>。不过仅仅给用户返回原始的信息是不够的——这些信息需要以用户友好的方式进行格式化，一般会是 HTML。所以，信息需要发送给一个视图（view），通常会是 JSP。</li><li>控制器所做的最后一件事就是将<strong>模型数据</strong>打包，并且标示出用于渲染输出的视图名。它接下来会将请求连同模型和视图名发送回 DispatcherServlet 。</li><li>这样，控制器就不会与特定的视图相耦合，传递给 DispatcherServlet 的视图名并不直接表示某个特定的 JSP。实际上，它甚至并不能确定视图就是 JSP。相反，它仅仅传递了一个逻辑名称，个名字将会用来查找产生结果的真正视图。DispatcherServlet 将会使用视图解析器（viewResolver）来将逻辑视图名匹配为一个特定的视图实现，它可能是也可能不是 JSP。</li><li> 既然 DispatcherServlet 已经知道由哪个视图渲染结果，那请求的任务基本上也就完成了。它的最后一站是视图的实现（可能是 JSP） ，在这里它交付模型数据。请求的任务就完成了。视图将使用模型数据渲染输出，这个输出会通过响应对象传递给客户端（不会像听上去那样硬编码） 。</li><li> 可以看到，请求要经过很多的步骤，最终才能形成返回给客户端的响应。大多数的步骤都是在 Spring 框架内部完成的，也就是上图所示的组件中。</li></ul><h4 id="第一个SpringMVC程序"><a href="#第一个SpringMVC程序" class="headerlink" title="第一个SpringMVC程序"></a>第一个SpringMVC程序</h4><h5 id="第一步：配置环境（新建Web工程-导包-配置Tomcat）"><a href="#第一步：配置环境（新建Web工程-导包-配置Tomcat）" class="headerlink" title="第一步：配置环境（新建Web工程+导包+配置Tomcat）"></a><strong>第一步：配置环境（新建Web工程+导包+配置Tomcat）</strong></h5><p>在IDEA中新建MavenWeb工程，新建好后导包，使用SpringMVC所需要的基本的Maven依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">pom.xml中的依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span></span></span><br><span class="line">  &lt;spring.version&gt;5.1.4.RELEASE&lt;/spring.version&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet JSP依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：配置DispatcherServlet"><a href="#第二步：配置DispatcherServlet" class="headerlink" title="第二步：配置DispatcherServlet"></a><strong>第二步：配置DispatcherServlet</strong></h5><p>通过DispatcherServlet这个名字可以大概了解到，这就是一个servlet,因此要想使一个sevlet起作用无非两种方法：一种是在servle类的头部加<code>@WebServlet</code>注解，二是在web.xml文件中配置<code>&lt;servlet&gt;</code>和<code>servlet-mapping</code>，第一种方法在这里显然不可行，人家源码肯定不能让改，那就需要在web.xml配置它，配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--配置前段控制器DispatcherServlet到web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--初始化参数：是springMVC配置文件的类路径，也可以不配这个，在笔记最后有说明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--url路径表示拦截所有的请求</span></span><br><span class="line"><span class="comment"> /和/*都是拦截所有的请求</span></span><br><span class="line"><span class="comment"> /*的拦截范围更大，会拦截*.jsp,而/不会拦截*.jsp</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着在src/resources下新建<code>springmvc.xml</code>，配置springmvc：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xzy.contorller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当请求的中径没有对应的controller 那么就访问静态资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置一个视图解析器：会帮我们拼接页面地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第三步：在webapp包下新建一个index-html以及hello-jsp，随便写点啥"><a href="#第三步：在webapp包下新建一个index-html以及hello-jsp，随便写点啥" class="headerlink" title="第三步：在webapp包下新建一个index.html以及hello.jsp，随便写点啥"></a><strong>第三步：在webapp包下新建一个index.html以及hello.jsp，随便写点啥<strong></strong></strong></h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"hello"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align="center"&gt;第一个Spring mVC&lt;/h1&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    $&#123;msg&#125;&lt;br/&gt;</span><br><span class="line">    $&#123;teacher.name&#125;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;img src=<span class="string">"img/a1.jpg"</span>/&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="第四步：新建一个Controller，比如就叫HelloController"><a href="#第四步：新建一个Controller，比如就叫HelloController" class="headerlink" title="第四步：新建一个Controller，比如就叫HelloController"></a><strong>第四步：新建一个Controller，比如就叫<font size="4"><code>HelloController</code></font></strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzy.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xzy.bean.Teacher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到请求，正在处理......"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"Welcome to SpringMVC!"</span>);</span><br><span class="line">        <span class="comment">/* &lt;property name="prefix" value="/WEB-INF/pages/"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="suffix" value=".jsp"/&gt;</span></span><br><span class="line"><span class="comment">          在xml配置的视图解析器会自动帮我们拼接页面地址：prefix+返回值+suffix</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="4">测试结果：</font></p><center><a href="https://sm.ms/image/V4ql3BYfvhtmSJ6" target="_blank"><img src="https://i.loli.net/2019/08/08/V4ql3BYfvhtmSJ6.png"></a></center><p><strong>总结在做的时候的几细节</strong><br>1.</p><blockquote><p>Spring MVC 下Web项目的运行流程：<br>1.点击<a href="http://localhost/SpringMVC_01_war_exploded/后浏览器把请求给tomcat服务器" target="_blank" rel="noopener">http://localhost/SpringMVC_01_war_exploded/后浏览器把请求给tomcat服务器</a><br>2.服务器中由于配置了SpringMVC的Dispatcherservlet，他可以收到所有的请求<br>3.Dispatcherservlet拿到请求后查看请求地址和@RequestMapping()中的那个地址(对应的方法)匹配<br>4.前端控制器找到目标处理器和方法后，直接利用反射调用方法<br>5.方法执行完成会有返回值（视图名），SpringMVC认为这就是方法执行完后要去的页面<br>6.拿到方法返回值后，视图解析器拼接触页面地址<br>7.拿到页面地址后，前段控制器就会使用转发的方式到目标页面</p></blockquote><p>2.</p><blockquote><p>关于springmvc.xml配置文件的配置：<br>在web.xml配置前段控制器又这么一段配置，他的作用是告诉服务器去哪里加载对于前端控制器的配置文件：<br><init-param><br>  <param-name>contextConfigLocation</param-name><br>  <param-value>classpath:springmvc.xml</param-value><br></init-param></p></blockquote><p>如果我们没有写他会发生什么呢？会发生异常：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">08</span>-<span class="number">03</span> <span class="number">15</span>:<span class="number">07</span>:<span class="number">16</span> <span class="string">[INFO]</span>-<span class="string">[org.springframework.web.servlet.DispatcherServlet]</span> Initializing Servlet 'app'</span><br><span class="line">  <span class="number">2019</span>-<span class="number">08</span>-<span class="number">03</span> <span class="number">15</span>:<span class="number">07</span>:<span class="number">16</span> <span class="string">[ERROR]</span>-<span class="string">[org.springframework.web.servlet.DispatcherServlet]</span> Context initialization failed</span><br><span class="line">  org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from ServletContext resource <span class="string">[/WEB-INF/app-servlet.xml]</span>; nested exception is java.io.FileNotFoundException: Could not open ServletContext resource <span class="string">[/WEB-INF/app-servlet.xml]</span></span><br><span class="line">at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:<span class="number">344</span>)</span><br><span class="line">at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:<span class="number">304</span>)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:<span class="number">188</span>)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:<span class="number">224</span>)</span><br></pre></td></tr></table></figure><p>一大堆异常信息最终就是告诉中我们你没有给配置文件的路径，那我（SpringMVC）就会在<code>/WEB-INF目录下</code>默认加载一个文件叫<code>app-servlet.xml</code>的文件，然而也没有找到，从而无法完成初始化。从这里我们知道，在配置前端控制器的时候也可以不写初始化参数，但是我们必须将springmvc配置文件放在WEB-INF目录下，并且文件的必须名字是：<font color="red" size="4">前端控制器的<code>&lt;servlet-name&gt;app&lt;/servlet-name&gt;</code>+<code>-servlet.xml</code></font>,这是规定，不可随便来，你想节省一些操作就得按人家的要求来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Spring-MVC体系结构：&quot;&gt;&lt;a href=&quot;#Spring-MVC体系结构：&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC体系结构：&quot;&gt;&lt;/a&gt;Spring MVC体系结构：&lt;/h4&gt;&lt;p&gt;SpringMVC 是基于 Mode
      
    
    </summary>
    
      <category term="Spring框架" scheme="http://easyblog.top/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="http://easyblog.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>认识Spring框架</title>
    <link href="http://easyblog.top/2019/08/01/%E8%AE%A4%E8%AF%86Spring%E6%A1%86%E6%9E%B6/"/>
    <id>http://easyblog.top/2019/08/01/认识Spring框架/</id>
    <published>2019-08-01T11:24:59.000Z</published>
    <updated>2019-08-13T16:07:59.495Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 框架是 Java 应用最广的框架，它的成功来源于理念，而不是技术本身，它的理念包括 IoC (Inversion of Control，控制反转) 和 AOP(Aspect Oriented Programming，面向切面编程)。</p><h4 id="什么是-Spring："><a href="#什么是-Spring：" class="headerlink" title="什么是 Spring："></a>什么是 Spring：</h4><p>1). Spring 是一个轻量级的 DI / IoC 和 AOP 容器的开源框架，来源于 Rod Johnson 在其著作《Expert one on one J2EE design and development》中阐述的部分理念和原型衍生而来。<br>2).Spring 提倡以“最少侵入”的方式来管理应用中的代码，这意味着我们可以随时安装或者卸载 Spring<br>3).适用范围：任何 Java 应用<br>4).Spring 的根本使命：简化 Java 开发</p><h4 id="Spring-中常用术语："><a href="#Spring-中常用术语：" class="headerlink" title="Spring 中常用术语："></a>Spring 中常用术语：<ul></ul></h4><li><strong><font color="red">框架</font></strong>：是能完成一定功能的半成品。框架能够帮助我们完成的是：项目的整体框架、一些基础功能、规定了类和对象如何创建，如何协作等，当我们开发一个项目时，框架帮助我们完成了一部分功能，我们自己再完成一部分，那这个项目就完成了。</li><li><strong><font color="red">非侵入式设计</font></strong>：从框架的角度可以理解为：无需继承框架提供的任何类这样我们在更换框架时，之前写过的代码几乎可以继续使用。</li><li><strong><font color="red">轻量级和重量级</font></strong>：轻量级是相对于重量级而言的，轻量级一般就是非入侵性的、所依赖的东西非常少、资源占用非常少、部署简单等等，其实就是比较容易使用，而重量级正好相反。</li><li><strong><font color="red">JavaBean</font></strong>：即符合 JavaBean 规范的 Java 类</li><li><strong><font color="red">POJO</font></strong>：即 Plain Old Java Objects，简单老式 Java 对象它可以包含业务逻辑或持久化逻辑，但不担当任何特殊角色且不继承或不实现任何其它Java框架的类或接口。</li>> 注意：bean 的各种名称——虽然 Spring 用 bean 或者 JavaBean 来表示应用组件，但并不意味着 Spring 组件必须遵循 JavaBean 规范，一个 Spring 组件可以是任意形式的 POJO。<li><strong><font color="red">容器</font></strong>：在日常生活中容器就是一种盛放东西的器具，从程序设计角度看就是装对象的的对象，因为存在放入、拿出等操作，所以容器还要管理对象的生命周期。<h4 id="Spring-的优势"><a href="#Spring-的优势" class="headerlink" title="Spring 的优势"></a>Spring 的优势<ul></ul></h4></li><li><strong><font color="red">低侵入 / 低耦合</font></strong> （降低组件之间的耦合度，实现软件各层之间的解耦）</li><li><strong><font color="red">声明式事务管理</font></strong>（基于切面和惯例）</li><li><strong><font color="red">方便集成其他框架</font></strong>（如MyBatis、Hibernate）</li><li><strong><font color="red">降低 Java 开发难度</font></strong></li><li>Spring 框架中包括了 J2EE 三层的每一层的解决方案（一站式）</li><h4 id="Spring能帮我们做什么"><a href="#Spring能帮我们做什么" class="headerlink" title="Spring能帮我们做什么"></a>Spring能帮我们做什么</h4><p>①.Spring 能帮我们根据配置文件<strong><font color="red">创建及组装对象之间的依赖关系。</font></strong><br>②.Spring <strong><font color="red">面向切面编程能帮助我们无耦合的实现日志记录，性能统计，安全控制。</font></strong><br>③.Spring 能非常简单的帮我们<strong><font color="red">管理数据库事务。</font></strong><br>④.Spring 还<strong><font color="red">提供了与第三方数据访问框架</font></strong>（如Hibernate、JPA）无缝集成，而且自己也提供了一套JDBC访问模板来方便数据库访问。<br>⑤.Spring 还<strong><font color="red">提供与第三方Web（如Struts1/2、JSF）框架无缝集成，而且自己也提供了一套Spring MVC框架，来方便web层搭建。</font></strong><br>⑥.Spring 能方便的与Java EE（如Java Mail、任务调度）整合，与更多技术整合（比如缓存框架）。</p><h4 id="Spring的框架体系结构："><a href="#Spring的框架体系结构：" class="headerlink" title="Spring的框架体系结构："></a><font color="green">Spring的框架体系结构：</font></h4><center><a href="https://sm.ms/image/fJtpaAD2kgbEoC9" target="_blank"><img src="https://i.loli.net/2019/08/07/fJtpaAD2kgbEoC9.png"></a></center><blockquote><ul><li>Data Access/Integration层包含有JDBC、ORM、OXM、JMS和Transaction模块。</li><li>Web层包含了Web、Web-Servlet、WebSocket、Web-Porlet模块。</li><li>AOP模块提供了一个符合AOP联盟标准的面向切面编程的实现。</li><li>Core Container(核心容器)：包含有Beans、Core、Context和SpEL模块。</li><li>Test模块支持使用JUnit和TestNG对Spring组件进行测试。</li></ul></blockquote><p>下面介绍这5个部分的jar以及依赖关系</p><h5 id="Core"><a href="#Core" class="headerlink" title="Core"></a><strong><font size="5">Core</font></strong></h5><p>core部分包含4个模块:<br>spring-core：依赖注入IoC与DI的最基本实现<br>spring-beans：Bean工厂与bean的装配<br>spring-context：spring的context上下文即IoC容器<br>spring-expression：spring表达式语言<br>它们的依赖关系</p><center><a href="https://sm.ms/image/L5HkeilJMW9KSqE" target="_blank"><img src="https://i.loli.net/2019/08/07/L5HkeilJMW9KSqE.png"></a></center><h5 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a><strong><font size="5">AOP</font></strong></h5><p>aop部分包含4个模块:<br>spring-aop：面向切面编程<br>spring-aspects：集成AspectJ<br>spring-instrument：提供一些类级的工具支持和ClassLoader级的实现，用于服务器<br>spring-instrument-tomcat：针对tomcat的instrument实现<br>它们的依赖关系</p><center><a href="https://sm.ms/image/S7glAo4NLy21n8C" target="_blank"><img src="https://i.loli.net/2019/08/07/S7glAo4NLy21n8C.png"></a></center><h5 id="Data-Access"><a href="#Data-Access" class="headerlink" title="Data Access"></a><strong><font size="5">Data Access</font></strong></h5><p>data access部分包含5个模块<br>spring-jdbc：jdbc的支持<br>spring-tx：事务控制<br>spring-orm：对象关系映射，集成orm框架<br>spring-oxm：对象xml映射<br>spring-jms：java消息服务<br>它们的依赖关系</p><center><a href="https://sm.ms/image/TJpHVwaIQZSGNYF" target="_blank"><img src="https://i.loli.net/2019/08/07/TJpHVwaIQZSGNYF.png"></a></center><h5 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong><font size="5">Web</font></strong></h5><p>web部分包含4个模块<br>spring-web：基础web功能，如文件上传<br>spring-webmvc：mvc实现<br>spring-webmvc-portlet：基于portlet的mvc实现<br>spring-struts：与struts的集成，不推荐，spring4不再提供<br>它们的依赖关系</p><center><a href="https://sm.ms/image/hRxDqY5cN19sUj8" target="_blank"><img src="https://i.loli.net/2019/08/07/hRxDqY5cN19sUj8.png"></a></center><h5 id="Test"><a href="#Test" class="headerlink" title="Test"></a><strong><font size="5">Test</font></strong></h5><p>test部分只有一个模块，我将spring-context-support也放在这吧<br>spring-test：spring测试，提供junit与mock测试功能<br>spring-context-support：spring额外支持包，比如邮件服务、视图解析等<br>它们的依赖关系</p><center><a href="https://sm.ms/image/yLUt2bvmcPBSTMw" target="_blank"><img src="https://i.loli.net/2019/08/07/yLUt2bvmcPBSTMw.png"></a></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring 框架是 Java 应用最广的框架，它的成功来源于理念，而不是技术本身，它的理念包括 IoC (Inversion of Control，控制反转) 和 AOP(Aspect Oriented Programming，面向切面编程)。&lt;/p&gt;
&lt;h4 id=&quot;什
      
    
    </summary>
    
      <category term="Spring框架" scheme="http://easyblog.top/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="http://easyblog.top/tags/Spring/"/>
    
  </entry>
  
</feed>
