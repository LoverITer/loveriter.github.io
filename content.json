[{"title":"SpringMVC获取请求参数","date":"2019-08-06T11:24:59.000Z","path":"2019/08/06/Springmvc/","text":"第一种方式：方法的形参上给一个和请求参数同名的参数1.获得普通类型的参数值示例代码 123456789101112131415/** * 第1种获得请求参数的方式：在方法的形参上给一个和请求参数同名的参数， * 之后SpringMVC会帮我们自动注入参数值 * @param username * @param model * @return */@RequestMapping(value = \"/welcome\")public String welcome(String username, Model model)&#123; System.out.println(\"用户名：\"+username); model.addAttribute(\"username\",username); return \"success\";&#125; 2.获得POJO类型的值示例代码：新建Book.java以及Address.java两个POJOBook.java 12345678910111213package com.xzy.bean;public class Book &#123; private String name; private Double price; private Integer stock; //库存 private Integer sales; //销量 private String author; private Address address; //地址 //省略getter、setter方法，并且重写toString()方法&#125; Address.java 123456789package com.xzy.bean;public class Address &#123; private String province; private String county; private String city; //省略getter、setter方法，并且重写toString()方法 写一个简单的表单：index.html 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;SpringMvc获取参数&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt; &lt;h3&gt;录入书籍信息&lt;/h3&gt; &lt;form action=\"book\" method=\"post\"&gt; 书名：&lt;input type=\"text\" name=\"name\" placeholder=\"输入书名...\"/&gt;&lt;br/&gt; 作者：&lt;input type=\"text\" name=\"author\" placeholder=\"输入作者...\"/&gt;&lt;br/&gt; 价格：&lt;input type=\"text\" name=\"price\" placeholder=\"输入价格...\"/&gt;&lt;br/&gt; 库存：&lt;input type=\"text\" name=\"stock\" placeholder=\"输入库存...\"/&gt;&lt;br/&gt; 销量：&lt;input type=\"text\" name=\"sales\" placeholder=\"输入销量...\"/&gt;&lt;br/&gt; &lt;input type=\"text\" name=\"address.province\" /&gt;省&amp;nbsp; &lt;input type=\"text\" name=\"address.city\" /&gt;市&amp;nbsp; &lt;input type=\"text\" name=\"address.county\" /&gt;(区/县)&amp;nbsp;&lt;br/&gt; &lt;button type=\"submit\"&gt;提交信息&lt;/button&gt; &lt;/form&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt; 提交后的页面：book.jsp 12345678910111213141516171819202122232425&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" import=\"com.xzy.bean.*\"%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;SpringMVC获取参数&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt; &lt;div style=\"height: 200px;width: 100%\"&gt; &lt;h3&gt;提交的书籍的信息：&lt;/h3&gt; &lt;table border=\"1px\" width=\"50%\"&gt; &lt;tr&gt;&lt;th&gt;书名&lt;/th&gt;&lt;td&gt;$&#123;book.name&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th&gt;作者&lt;/th&gt;&lt;td&gt;$&#123;book.author&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th&gt;价格&lt;/th&gt;&lt;td&gt;$&#123;book.price&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th&gt;库存&lt;/th&gt;&lt;td&gt;$&#123;book.stock&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th&gt;销量&lt;/th&gt;&lt;td&gt;$&#123;book.sales&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th&gt;地区&lt;/th&gt;&lt;td&gt;$&#123;book.address&#125;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/div&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt; 提供一个控制器：BookContorller.java 1234567891011121314151617181920212223242526package com.xzy.controller;import com.xzy.bean.Book;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpServletRequest;@Controllerpublic class BookContorller &#123; /** * SprningMVC帮我们自动注入参数到POJO类型中，而且还可以级联注入 * @param book * @param request * @return */ @RequestMapping(\"/book\") public String addbook(Book book, HttpServletRequest request)&#123; //打印得到的book信息 System.out.println(book); request.setAttribute(\"book\",book); return \"book\"; &#125;&#125; 测试结果： 第二种方式：使用Spring提供的注解1. 使用@RequestParam 获取参数@RequestParam的源码： 123456789101112131415public @interface RequestParam &#123; //默认值就是它，表示请求参数的key @AliasFor(\"name\") String value() default \"\"; //请求参数的值 @AliasFor(\"value\") String name() default \"\"; //设置这个参数是否必须，required=false表示这个参数不是必须的 boolean required() default true; //参数的默认值 String defaultValue() default \"\\n\\t\\t\\n\\t\\t\\n\\ue000\\ue001\\ue002\\n\\t\\t\\t\\t\\n\"; &#125; 示例代码： 12345678910111213141516171819/** * RequestParam设置获取参数的key为user,required=false表示这个参数不是必须的， * defaultValue是这个参数的默认值 * @RequestParam(value = \"user\", required = false, defaultValue = \"\") String username； * 等价于以前写的： * String user=null!=request.getParameter(\"user\")?request.getParameter(\"user\"):\"\"; * @param username * @param model * @return */@RequestMapping(\"/welcome3\")public String welocme3( @RequestParam(value = \"user\", required = false, defaultValue = \"\") String username, Model model) &#123; System.out.println(\"用户名：\" + username); model.addAttribute(\"username\", username); return \"success\";&#125; 2.使用@RequestHeader获得请求的头部信息@RequestHeader和@ReuqestParma的实现方式如出一辙，使用方法也基本相同。示例代码1：使用RequestHeader注解获得浏览器的信息 123456789101112131415161718192021/** * @RequestHeader(value = \"User-Agent\",required = false,defaultValue = \"\") String userAgent * 获取请求头中的值，相当于以前写的： * String header=null!=request.getHeader(\"User-Agent\")? request.getHeader(\"User-Agent\"):\"\"; * @param username * @param userAgent * @param model * @return */ @RequestMapping(\"/welcome4\") public String welocme4( @RequestParam(value = \"user\", required = false, defaultValue = \"\") String username, @RequestHeader(value = \"User-Agent\",defaultValue = \"\") String userAgent, Model model) &#123; System.out.println(\"用户名：\" + username); System.out.println(\"User-Agent\"+userAgent); model.addAttribute(\"userAgent\",userAgent); model.addAttribute(\"username\", username); return \"success\"; &#125; 示例代码2：使用RequestHeader注解获取请求头部的Cookie信息 123456789101112131415161718/** * 使用RequestHeader获得请求头中的Cookie的全部信息 * @param username * @param cookie * @param model * @return */ @RequestMapping(\"/welcome5\") public String welocome5( @RequestParam(value = \"user\", required = false, defaultValue = \"\") String username, @RequestHeader(value = \"Cookie\",required = false,defaultValue = \"\") String cookie, Model model)&#123; System.out.println(\"用户名：\" + username); model.addAttribute(\"cookie\",cookie); model.addAttribute(\"username\", username); return \"success\"; &#125; 3.使用CookieValue获得请求头部的JSESSIONID示例代码： 123456789101112131415161718192021/** * 使用SpringMVC提供的@CookieValue注解，可以只获的JSESSIONID的值 * @param username * @param cookie * @param model * @return */ @RequestMapping(\"/welcome6\") public String welocome6( @RequestParam(value = \"user\", required = false, defaultValue = \"\") String username, @CookieValue(value = \"JSESSIONID\" ,required = false,defaultValue = \"\") String cookie, Model model)&#123; System.out.println(\"用户名：\" + username); model.addAttribute(\"cookie\",cookie); model.addAttribute(\"username\", username); System.out.println(\"cookie：\"+cookie); return \"success\"; &#125;","tags":[]},{"title":"认识Spring框架","date":"2019-08-05T11:24:59.000Z","path":"2019/08/05/认识Spring框架/","text":"Spring 框架是 Java 应用最广的框架，它的成功来源于理念，而不是技术本身，它的理念包括 IoC (Inversion of Control，控制反转) 和 AOP(Aspect Oriented Programming，面向切面编程)。 什么是 Spring：1). Spring 是一个轻量级的 DI / IoC 和 AOP 容器的开源框架，来源于 Rod Johnson 在其著作《Expert one on one J2EE design and development》中阐述的部分理念和原型衍生而来。2).Spring 提倡以“最少侵入”的方式来管理应用中的代码，这意味着我们可以随时安装或者卸载 Spring3).适用范围：任何 Java 应用4).Spring 的根本使命：简化 Java 开发 Spring 中常用术语：框架：是能完成一定功能的半成品。框架能够帮助我们完成的是：项目的整体框架、一些基础功能、规定了类和对象如何创建，如何协作等，当我们开发一个项目时，框架帮助我们完成了一部分功能，我们自己再完成一部分，那这个项目就完成了。 非侵入式设计： 从框架的角度可以理解为：无需继承框架提供的任何类这样我们在更换框架时，之前写过的代码几乎可以继续使用。 轻量级和重量级： 轻量级是相对于重量级而言的，轻量级一般就是非入侵性的、所依赖的东西非常少、资源占用非常少、部署简单等等，其实就是比较容易使用，而重量级正好相反。 JavaBean： 即符合 JavaBean 规范的 Java 类 POJO：即 Plain Old Java Objects，简单老式 Java 对象它可以包含业务逻辑或持久化逻辑，但不担当任何特殊角色且不继承或不实现任何其它Java框架的类或接口。 > 注意：bean 的各种名称——虽然 Spring 用 bean 或者 JavaBean 来表示应用组件，但并不意味着 Spring 组件必须遵循 JavaBean 规范，一个 Spring 组件可以是任意形式的 POJO。 容器： 在日常生活中容器就是一种盛放东西的器具，从程序设计角度看就是装对象的的对象，因为存在放入、拿出等操作，所以容器还要管理对象的生命周期。 Spring 的优势低侵入 / 低耦合 （降低组件之间的耦合度，实现软件各层之间的解耦） 声明式事务管理（基于切面和惯例） 方便集成其他框架（如MyBatis、Hibernate） 降低 Java 开发难度 Spring 框架中包括了 J2EE 三层的每一层的解决方案（一站式） Spring能帮我们做什么①.Spring 能帮我们根据配置文件创建及组装对象之间的依赖关系。②.Spring 面向切面编程能帮助我们无耦合的实现日志记录，性能统计，安全控制。③.Spring 能非常简单的帮我们管理数据库事务。④.Spring 还提供了与第三方数据访问框架（如Hibernate、JPA）无缝集成，而且自己也提供了一套JDBC访问模板来方便数据库访问。⑤.Spring 还提供与第三方Web（如Struts1/2、JSF）框架无缝集成，而且自己也提供了一套Spring MVC框架，来方便web层搭建。⑥.Spring 能方便的与Java EE（如Java Mail、任务调度）整合，与更多技术整合（比如缓存框架）。 Spring的框架体系结构： Data Access/Integration层包含有JDBC、ORM、OXM、JMS和Transaction模块。 Web层包含了Web、Web-Servlet、WebSocket、Web-Porlet模块。 AOP模块提供了一个符合AOP联盟标准的面向切面编程的实现。 Core Container(核心容器)：包含有Beans、Core、Context和SpEL模块。 Test模块支持使用JUnit和TestNG对Spring组件进行测试。 下面介绍这5个部分的jar以及依赖关系 Corecore部分包含4个模块:spring-core：依赖注入IoC与DI的最基本实现spring-beans：Bean工厂与bean的装配spring-context：spring的context上下文即IoC容器spring-expression：spring表达式语言它们的依赖关系 AOPaop部分包含4个模块:spring-aop：面向切面编程spring-aspects：集成AspectJspring-instrument：提供一些类级的工具支持和ClassLoader级的实现，用于服务器spring-instrument-tomcat：针对tomcat的instrument实现它们的依赖关系 Data Accessdata access部分包含5个模块spring-jdbc：jdbc的支持spring-tx：事务控制spring-orm：对象关系映射，集成orm框架spring-oxm：对象xml映射spring-jms：java消息服务它们的依赖关系 Webweb部分包含4个模块spring-web：基础web功能，如文件上传spring-webmvc：mvc实现spring-webmvc-portlet：基于portlet的mvc实现spring-struts：与struts的集成，不推荐，spring4不再提供它们的依赖关系 Testtest部分只有一个模块，我将spring-context-support也放在这吧spring-test：spring测试，提供junit与mock测试功能spring-context-support：spring额外支持包，比如邮件服务、视图解析等它们的依赖关系","tags":[{"name":"Spring框架","slug":"Spring框架","permalink":"http://easyblog.top/tags/Spring框架/"},{"name":"Spring MVC","slug":"Spring-MVC","permalink":"http://easyblog.top/tags/Spring-MVC/"}]}]