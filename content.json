{"meta":{"title":"EasyBlog","subtitle":"Huangxin","description":"欢迎访问我的个人博客","author":"Huangxin","url":"http://easyblog.top"},"pages":[],"posts":[{"title":"","slug":"Springmvc","date":"2019-08-05T09:05:43.818Z","updated":"2019-08-05T09:19:16.622Z","comments":true,"path":"2019/08/05/Springmvc/","link":"","permalink":"http://easyblog.top/2019/08/05/Springmvc/","excerpt":"","text":"SpringMVC获取请求参数第一种方式：方法的形参上给一个和请求参数同名的参数1.获得普通类型的参数值示例代码 123456789101112131415/** * 第1种获得请求参数的方式：在方法的形参上给一个和请求参数同名的参数， * 之后SpringMVC会帮我们自动注入参数值 * @param username * @param model * @return */@RequestMapping(value = \"/welcome\")public String welcome(String username, Model model)&#123; System.out.println(\"用户名：\"+username); model.addAttribute(\"username\",username); return \"success\";&#125; 2.获得POJO类型的值示例代码：新建Book.java以及Address.java两个POJOBook.java 12345678910111213package com.xzy.bean;public class Book &#123; private String name; private Double price; private Integer stock; //库存 private Integer sales; //销量 private String author; private Address address; //地址 //省略getter、setter方法，并且重写toString()方法&#125; Address.java 123456789package com.xzy.bean;public class Address &#123; private String province; private String county; private String city; //省略getter、setter方法，并且重写toString()方法 写一个简单的表单：index.html 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;SpringMvc获取参数&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt; &lt;h3&gt;录入书籍信息&lt;/h3&gt; &lt;form action=\"book\" method=\"post\"&gt; 书名：&lt;input type=\"text\" name=\"name\" placeholder=\"输入书名...\"/&gt;&lt;br/&gt; 作者：&lt;input type=\"text\" name=\"author\" placeholder=\"输入作者...\"/&gt;&lt;br/&gt; 价格：&lt;input type=\"text\" name=\"price\" placeholder=\"输入价格...\"/&gt;&lt;br/&gt; 库存：&lt;input type=\"text\" name=\"stock\" placeholder=\"输入库存...\"/&gt;&lt;br/&gt; 销量：&lt;input type=\"text\" name=\"sales\" placeholder=\"输入销量...\"/&gt;&lt;br/&gt; &lt;input type=\"text\" name=\"address.province\" /&gt;省&amp;nbsp; &lt;input type=\"text\" name=\"address.city\" /&gt;市&amp;nbsp; &lt;input type=\"text\" name=\"address.county\" /&gt;(区/县)&amp;nbsp;&lt;br/&gt; &lt;button type=\"submit\"&gt;提交信息&lt;/button&gt; &lt;/form&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt; 提交后的页面：book.jsp 12345678910111213141516171819202122232425&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" import=\"com.xzy.bean.*\"%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;SpringMVC获取参数&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt; &lt;div style=\"height: 200px;width: 100%\"&gt; &lt;h3&gt;提交的书籍的信息：&lt;/h3&gt; &lt;table border=\"1px\" width=\"50%\"&gt; &lt;tr&gt;&lt;th&gt;书名&lt;/th&gt;&lt;td&gt;$&#123;book.name&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th&gt;作者&lt;/th&gt;&lt;td&gt;$&#123;book.author&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th&gt;价格&lt;/th&gt;&lt;td&gt;$&#123;book.price&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th&gt;库存&lt;/th&gt;&lt;td&gt;$&#123;book.stock&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th&gt;销量&lt;/th&gt;&lt;td&gt;$&#123;book.sales&#125;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th&gt;地区&lt;/th&gt;&lt;td&gt;$&#123;book.address&#125;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/div&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt; 提供一个控制器：BookContorller.java 1234567891011121314151617181920212223242526package com.xzy.controller;import com.xzy.bean.Book;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpServletRequest;@Controllerpublic class BookContorller &#123; /** * SprningMVC帮我们自动注入参数到POJO类型中，而且还可以级联注入 * @param book * @param request * @return */ @RequestMapping(\"/book\") public String addbook(Book book, HttpServletRequest request)&#123; //打印得到的book信息 System.out.println(book); request.setAttribute(\"book\",book); return \"book\"; &#125;&#125; 测试结果： 第二种方式：使用Spring提供的注解1. 使用@RequestParam 获取参数@RequestParam的源码： 123456789101112131415public @interface RequestParam &#123; //默认值就是它，表示请求参数的key @AliasFor(\"name\") String value() default \"\"; //请求参数的值 @AliasFor(\"value\") String name() default \"\"; //设置这个参数是否必须，required=false表示这个参数不是必须的 boolean required() default true; //参数的默认值 String defaultValue() default \"\\n\\t\\t\\n\\t\\t\\n\\ue000\\ue001\\ue002\\n\\t\\t\\t\\t\\n\"; &#125; 示例代码： 12345678910111213141516171819/** * RequestParam设置获取参数的key为user,required=false表示这个参数不是必须的， * defaultValue是这个参数的默认值 * @RequestParam(value = \"user\", required = false, defaultValue = \"\") String username； * 等价于以前写的： * String user=null!=request.getParameter(\"user\")?request.getParameter(\"user\"):\"\"; * @param username * @param model * @return */@RequestMapping(\"/welcome3\")public String welocme3( @RequestParam(value = \"user\", required = false, defaultValue = \"\") String username, Model model) &#123; System.out.println(\"用户名：\" + username); model.addAttribute(\"username\", username); return \"success\";&#125; 2.使用@RequestHeader获得请求的头部信息@RequestHeader和@ReuqestParma的实现方式如出一辙，使用方法也基本相同。示例代码1：使用RequestHeader注解获得浏览器的信息 123456789101112131415161718192021/** * @RequestHeader(value = \"User-Agent\",required = false,defaultValue = \"\") String userAgent * 获取请求头中的值，相当于以前写的： * String header=null!=request.getHeader(\"User-Agent\")? request.getHeader(\"User-Agent\"):\"\"; * @param username * @param userAgent * @param model * @return */ @RequestMapping(\"/welcome4\") public String welocme4( @RequestParam(value = \"user\", required = false, defaultValue = \"\") String username, @RequestHeader(value = \"User-Agent\",defaultValue = \"\") String userAgent, Model model) &#123; System.out.println(\"用户名：\" + username); System.out.println(\"User-Agent\"+userAgent); model.addAttribute(\"userAgent\",userAgent); model.addAttribute(\"username\", username); return \"success\"; &#125; 示例代码2：使用RequestHeader注解获取请求头部的Cookie信息 123456789101112131415161718/** * 使用RequestHeader获得请求头中的Cookie的全部信息 * @param username * @param cookie * @param model * @return */ @RequestMapping(\"/welcome5\") public String welocome5( @RequestParam(value = \"user\", required = false, defaultValue = \"\") String username, @RequestHeader(value = \"Cookie\",required = false,defaultValue = \"\") String cookie, Model model)&#123; System.out.println(\"用户名：\" + username); model.addAttribute(\"cookie\",cookie); model.addAttribute(\"username\", username); return \"success\"; &#125; 3.使用CookieValue获得请求头部的JSESSIONID示例代码： 123456789101112131415161718192021/** * 使用SpringMVC提供的@CookieValue注解，可以只获的JSESSIONID的值 * @param username * @param cookie * @param model * @return */ @RequestMapping(\"/welcome6\") public String welocome6( @RequestParam(value = \"user\", required = false, defaultValue = \"\") String username, @CookieValue(value = \"JSESSIONID\" ,required = false,defaultValue = \"\") String cookie, Model model)&#123; System.out.println(\"用户名：\" + username); model.addAttribute(\"cookie\",cookie); model.addAttribute(\"username\", username); System.out.println(\"cookie：\"+cookie); return \"success\"; &#125;","categories":[],"tags":[],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2019-08-05T02:02:46.753Z","updated":"2019-08-05T02:02:46.753Z","comments":true,"path":"2019/08/05/hello-world/","link":"","permalink":"http://easyblog.top/2019/08/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}